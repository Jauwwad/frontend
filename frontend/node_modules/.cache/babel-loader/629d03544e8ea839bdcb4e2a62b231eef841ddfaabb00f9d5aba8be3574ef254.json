{"ast":null,"code":"import axios from'axios';const API_BASE_URL='http://localhost:8002';// Create axios instance with default config\nconst apiClient=axios.create({baseURL:API_BASE_URL,timeout:30000,headers:{'Content-Type':'application/json'}});// Add auth token to requests if available\napiClient.interceptors.request.use(config=>{const token=localStorage.getItem('auth_token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;});// API Functions\n// Project Management\nexport const projectAPI={create:async projectData=>{const response=await apiClient.post('/api/projects/create',projectData);return response.data;},getById:async projectId=>{const response=await apiClient.get(\"/api/projects/\".concat(projectId));return response.data;},list:async function(){let status=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;const params=status?{status}:{};const response=await apiClient.get('/api/projects',{params});return response.data;}};// Admin Functions\nexport const adminAPI={reviewProject:async(projectId,action,comments)=>{const requestData={decision:action==='approve'?'approved':'rejected',comments:comments};const response=await apiClient.post(\"/api/admin/projects/\".concat(projectId,\"/review\"),requestData);return response.data;},getDashboard:async()=>{const response=await apiClient.get('/api/admin/dashboard');return response.data;}};// MRV Data Collection\nexport const mrvAPI={collect:async mrvData=>{const response=await apiClient.post('/mrv/collect',mrvData);return response.data;},getData:async projectId=>{const response=await apiClient.get(\"/mrv/\".concat(projectId));return response.data;}};// Verification\nexport const verificationAPI={verify:async verificationData=>{const response=await apiClient.post('/verification/verify',verificationData);return response.data;}};// Carbon Credits\nexport const creditAPI={tokenize:async projectId=>{const response=await apiClient.post(\"/credits/tokenize/\".concat(projectId));return response.data;}};// Marketplace\nexport const marketplaceAPI={listCredits:async listingData=>{const response=await apiClient.post('/marketplace/list',listingData);return response.data;},getListings:async function(){let status=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'active';const response=await apiClient.get('/marketplace',{params:{status}});return response.data;},purchaseCredits:async(listingId,quantity)=>{const formData=new FormData();formData.append('quantity',quantity.toString());const response=await apiClient.post(\"/marketplace/\".concat(listingId,\"/purchase\"),formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;}};// Payments\nexport const paymentAPI={distribute:async projectId=>{const response=await apiClient.post(\"/payments/distribute/\".concat(projectId));return response.data;}};// Reports\nexport const reportsAPI={getProjectReport:async projectId=>{const response=await apiClient.get(\"/reports/project/\".concat(projectId));return response.data;},getSystemDashboard:async()=>{const response=await apiClient.get('/reports/dashboard');return response.data;}};// Health Check\nexport const healthAPI={check:async()=>{const response=await apiClient.get('/health');return response.data;},status:async()=>{const response=await apiClient.get('/api/status');return response.data;}};// Utility function to handle API errors\nexport const handleAPIError=error=>{if(error.response){// Server responded with error status\nreturn{message:error.response.data.detail||'An error occurred',status:error.response.status};}else if(error.request){// Request made but no response\nreturn{message:'Network error - please check your connection',status:0};}else{// Something else happened\nreturn{message:error.message||'An unexpected error occurred',status:-1};}};export default apiClient;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}