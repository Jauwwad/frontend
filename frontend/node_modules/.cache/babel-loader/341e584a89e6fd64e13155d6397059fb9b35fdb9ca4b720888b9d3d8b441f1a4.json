{"ast":null,"code":"import Web3 from 'web3';\n\n// Contract addresses from deployed contracts on Polygon Amoy\nconst CONTRACTS = {\n  ProjectRegistry: '0x331A9336B7855E32B46F78053a963dc7FB6e3281',\n  CarbonCreditToken: '0x50DB160bb4dfA789D600b5Be7eD80f66993b7620',\n  UniqueCarbonCreditNFT: '0x8cB6Db9a056D2C9cEaD3860B2035ed0FEDaBE2Db',\n  PaymentDistributor: '0xC69d14B24D6330fBA0a7527fc0da64199E038a6f',\n  VerificationOracle: '0x0313771d7FB6A6460D7144eC660E2949eEdd515e'\n};\n\n// Polygon Amoy testnet configuration\nconst POLYGON_AMOY = {\n  chainId: '0x13882',\n  // 80002 in hex\n  chainName: 'Polygon Amoy Testnet',\n  nativeCurrency: {\n    name: 'MATIC',\n    symbol: 'MATIC',\n    decimals: 18\n  },\n  rpcUrls: ['https://rpc-amoy.polygon.technology/'],\n  blockExplorerUrls: ['https://amoy.polygonscan.com/']\n};\n\n// ProjectRegistry ABI (simplified for common functions)\nconst PROJECT_REGISTRY_ABI = [{\n  \"inputs\": [{\n    \"internalType\": \"string\",\n    \"name\": \"_name\",\n    \"type\": \"string\"\n  }, {\n    \"internalType\": \"string\",\n    \"name\": \"_description\",\n    \"type\": \"string\"\n  }, {\n    \"internalType\": \"uint8\",\n    \"name\": \"_ecosystemType\",\n    \"type\": \"uint8\"\n  }, {\n    \"internalType\": \"string\",\n    \"name\": \"_location\",\n    \"type\": \"string\"\n  }, {\n    \"internalType\": \"uint256\",\n    \"name\": \"_areaInHectares\",\n    \"type\": \"uint256\"\n  }, {\n    \"internalType\": \"address[]\",\n    \"name\": \"_communityWallets\",\n    \"type\": \"address[]\"\n  }, {\n    \"internalType\": \"string\",\n    \"name\": \"_ipfsHashMetadata\",\n    \"type\": \"string\"\n  }, {\n    \"internalType\": \"uint256\",\n    \"name\": \"_estimatedCarbonCredits\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"registerProject\",\n  \"outputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"\",\n    \"type\": \"uint256\"\n  }],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"_projectId\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"getProject\",\n  \"outputs\": [{\n    \"components\": [{\n      \"internalType\": \"uint256\",\n      \"name\": \"id\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"string\",\n      \"name\": \"name\",\n      \"type\": \"string\"\n    }, {\n      \"internalType\": \"string\",\n      \"name\": \"description\",\n      \"type\": \"string\"\n    }, {\n      \"internalType\": \"uint8\",\n      \"name\": \"ecosystemType\",\n      \"type\": \"uint8\"\n    }, {\n      \"internalType\": \"string\",\n      \"name\": \"location\",\n      \"type\": \"string\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"areaInHectares\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"address\",\n      \"name\": \"projectOwner\",\n      \"type\": \"address\"\n    }, {\n      \"internalType\": \"address[]\",\n      \"name\": \"communityWallets\",\n      \"type\": \"address[]\"\n    }, {\n      \"internalType\": \"address[]\",\n      \"name\": \"verifiers\",\n      \"type\": \"address[]\"\n    }, {\n      \"internalType\": \"uint8\",\n      \"name\": \"status\",\n      \"type\": \"uint8\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"createdAt\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"approvedAt\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"string\",\n      \"name\": \"ipfsHashMetadata\",\n      \"type\": \"string\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"estimatedCarbonCredits\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"uint256\",\n      \"name\": \"totalCarbonCredits\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"bool\",\n      \"name\": \"isActive\",\n      \"type\": \"bool\"\n    }],\n    \"internalType\": \"struct ProjectRegistry.Project\",\n    \"name\": \"\",\n    \"type\": \"tuple\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"_projectId\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"approveProject\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"getTotalProjects\",\n  \"outputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"\",\n    \"type\": \"uint256\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"_owner\",\n    \"type\": \"address\"\n  }],\n  \"name\": \"getProjectsByOwner\",\n  \"outputs\": [{\n    \"internalType\": \"uint256[]\",\n    \"name\": \"\",\n    \"type\": \"uint256[]\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}];\n\n// Carbon Credit Token ABI (ERC-20 functions)\nconst CARBON_CREDIT_TOKEN_ABI = [{\n  \"inputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"_to\",\n    \"type\": \"address\"\n  }, {\n    \"internalType\": \"uint256\",\n    \"name\": \"_amount\",\n    \"type\": \"uint256\"\n  }, {\n    \"internalType\": \"uint256\",\n    \"name\": \"_projectId\",\n    \"type\": \"uint256\"\n  }, {\n    \"internalType\": \"string\",\n    \"name\": \"_batchId\",\n    \"type\": \"string\"\n  }],\n  \"name\": \"mint\",\n  \"outputs\": [],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"account\",\n    \"type\": \"address\"\n  }],\n  \"name\": \"balanceOf\",\n  \"outputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"\",\n    \"type\": \"uint256\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"totalSupply\",\n  \"outputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"\",\n    \"type\": \"uint256\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"address\",\n    \"name\": \"to\",\n    \"type\": \"address\"\n  }, {\n    \"internalType\": \"uint256\",\n    \"name\": \"amount\",\n    \"type\": \"uint256\"\n  }],\n  \"name\": \"transfer\",\n  \"outputs\": [{\n    \"internalType\": \"bool\",\n    \"name\": \"\",\n    \"type\": \"bool\"\n  }],\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}];\nclass BlockchainService {\n  constructor() {\n    this.web3 = null;\n    this.account = null;\n    this.contracts = {};\n    this.isConnected = false;\n  }\n\n  // Initialize Web3 and connect to MetaMask\n  async init() {\n    try {\n      if (typeof window.ethereum !== 'undefined') {\n        this.web3 = new Web3(window.ethereum);\n\n        // Request account access if needed\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        this.account = accounts[0];\n        this.isConnected = true;\n\n        // Switch to Polygon Amoy testnet if needed\n        await this.switchToPolygonAmoy();\n\n        // Initialize contracts\n        this.initializeContracts();\n        console.log('🌊 Blockchain service initialized:', {\n          account: this.account,\n          network: await this.web3.eth.getChainId()\n        });\n        return true;\n      } else {\n        console.error('MetaMask not detected');\n        return false;\n      }\n    } catch (error) {\n      console.error('Failed to initialize blockchain service:', error);\n      return false;\n    }\n  }\n\n  // Switch to Polygon Amoy testnet\n  async switchToPolygonAmoy() {\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: POLYGON_AMOY.chainId\n        }]\n      });\n    } catch (switchError) {\n      // Add the network if it doesn't exist\n      if (switchError.code === 4902) {\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [POLYGON_AMOY]\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n\n  // Initialize smart contracts\n  initializeContracts() {\n    this.contracts.projectRegistry = new this.web3.eth.Contract(PROJECT_REGISTRY_ABI, CONTRACTS.ProjectRegistry);\n    this.contracts.carbonCreditToken = new this.web3.eth.Contract(CARBON_CREDIT_TOKEN_ABI, CONTRACTS.CarbonCreditToken);\n  }\n\n  // Register a new project on blockchain\n  async registerProject(projectData) {\n    try {\n      var _tx$events$ProjectReg, _tx$events$ProjectReg2;\n      if (!this.isConnected) {\n        throw new Error('Blockchain service not connected');\n      }\n      const {\n        title: name,\n        description,\n        ecosystem_type,\n        location,\n        area_hectares,\n        community_wallets = [],\n        ipfs_hash = '',\n        estimated_credits = 0\n      } = projectData;\n\n      // Convert ecosystem type to number (0: Mangrove, 1: Seagrass, 2: Saltmarsh)\n      const ecosystemTypeMap = {\n        'mangrove': 0,\n        'seagrass': 1,\n        'saltmarsh': 2\n      };\n      const ecosystemTypeNum = ecosystemTypeMap[ecosystem_type === null || ecosystem_type === void 0 ? void 0 : ecosystem_type.toLowerCase()] || 0;\n      console.log('🚀 Registering project on blockchain:', {\n        name,\n        ecosystemType: ecosystemTypeNum,\n        areaHectares: area_hectares,\n        estimatedCredits: estimated_credits\n      });\n      const tx = await this.contracts.projectRegistry.methods.registerProject(name, description, ecosystemTypeNum, location, this.web3.utils.toWei(area_hectares.toString(), 'ether'),\n      // Convert to wei for precision\n      community_wallets, ipfs_hash, estimated_credits).send({\n        from: this.account,\n        gas: 500000\n      });\n      console.log('✅ Project registered on blockchain:', tx.transactionHash);\n\n      // Get project ID from events\n      const projectId = (_tx$events$ProjectReg = tx.events.ProjectRegistered) === null || _tx$events$ProjectReg === void 0 ? void 0 : (_tx$events$ProjectReg2 = _tx$events$ProjectReg.returnValues) === null || _tx$events$ProjectReg2 === void 0 ? void 0 : _tx$events$ProjectReg2.projectId;\n      return {\n        success: true,\n        transactionHash: tx.transactionHash,\n        projectId: projectId,\n        blockNumber: tx.blockNumber\n      };\n    } catch (error) {\n      console.error('❌ Failed to register project on blockchain:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Get project details from blockchain\n  async getProject(projectId) {\n    try {\n      const project = await this.contracts.projectRegistry.methods.getProject(projectId).call();\n      return {\n        id: project.id,\n        name: project.name,\n        description: project.description,\n        ecosystemType: project.ecosystemType,\n        location: project.location,\n        areaInHectares: this.web3.utils.fromWei(project.areaInHectares, 'ether'),\n        projectOwner: project.projectOwner,\n        communityWallets: project.communityWallets,\n        status: project.status,\n        createdAt: new Date(parseInt(project.createdAt) * 1000),\n        approvedAt: project.approvedAt > 0 ? new Date(parseInt(project.approvedAt) * 1000) : null,\n        estimatedCarbonCredits: project.estimatedCarbonCredits,\n        totalCarbonCredits: project.totalCarbonCredits,\n        isActive: project.isActive\n      };\n    } catch (error) {\n      console.error('Failed to get project from blockchain:', error);\n      throw error;\n    }\n  }\n\n  // Approve a project (admin function)\n  async approveProject(projectId) {\n    try {\n      const tx = await this.contracts.projectRegistry.methods.approveProject(projectId).send({\n        from: this.account,\n        gas: 200000\n      });\n      return {\n        success: true,\n        transactionHash: tx.transactionHash\n      };\n    } catch (error) {\n      console.error('Failed to approve project:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Mint carbon credits for a project\n  async mintCarbonCredits(projectId, amount, batchId = '') {\n    try {\n      const tx = await this.contracts.carbonCreditToken.methods.mint(this.account,\n      // Mint to current account\n      amount, projectId, batchId || `batch_${Date.now()}`).send({\n        from: this.account,\n        gas: 300000\n      });\n      return {\n        success: true,\n        transactionHash: tx.transactionHash,\n        amount: amount\n      };\n    } catch (error) {\n      console.error('Failed to mint carbon credits:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Get carbon credit balance\n  async getCarbonCreditBalance(address = null) {\n    try {\n      const accountAddress = address || this.account;\n      const balance = await this.contracts.carbonCreditToken.methods.balanceOf(accountAddress).call();\n      return parseInt(balance);\n    } catch (error) {\n      console.error('Failed to get carbon credit balance:', error);\n      return 0;\n    }\n  }\n\n  // Get total carbon credits in circulation\n  async getTotalCarbonCredits() {\n    try {\n      const total = await this.contracts.carbonCreditToken.methods.totalSupply().call();\n      return parseInt(total);\n    } catch (error) {\n      console.error('Failed to get total carbon credits:', error);\n      return 0;\n    }\n  }\n\n  // Get user's projects\n  async getUserProjects(address = null) {\n    try {\n      const accountAddress = address || this.account;\n      const projectIds = await this.contracts.projectRegistry.methods.getProjectsByOwner(accountAddress).call();\n\n      // Get full project details for each ID\n      const projects = await Promise.all(projectIds.map(id => this.getProject(id)));\n      return projects;\n    } catch (error) {\n      console.error('Failed to get user projects:', error);\n      return [];\n    }\n  }\n\n  // Get total projects count\n  async getTotalProjectsCount() {\n    try {\n      const count = await this.contracts.projectRegistry.methods.getTotalProjects().call();\n      return parseInt(count);\n    } catch (error) {\n      console.error('Failed to get total projects count:', error);\n      return 0;\n    }\n  }\n\n  // Listen to blockchain events\n  subscribeToProjectEvents(callback) {\n    if (!this.contracts.projectRegistry) return;\n    this.contracts.projectRegistry.events.ProjectRegistered({\n      fromBlock: 'latest'\n    }).on('data', event => {\n      callback('ProjectRegistered', event.returnValues);\n    }).on('error', console.error);\n    this.contracts.projectRegistry.events.ProjectApproved({\n      fromBlock: 'latest'\n    }).on('data', event => {\n      callback('ProjectApproved', event.returnValues);\n    }).on('error', console.error);\n  }\n\n  // Transfer carbon credits\n  async transferCarbonCredits(toAddress, amount) {\n    try {\n      const tx = await this.contracts.carbonCreditToken.methods.transfer(toAddress, amount).send({\n        from: this.account,\n        gas: 200000\n      });\n      return {\n        success: true,\n        transactionHash: tx.transactionHash\n      };\n    } catch (error) {\n      console.error('Failed to transfer carbon credits:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Get blockchain network info\n  async getNetworkInfo() {\n    try {\n      const chainId = await this.web3.eth.getChainId();\n      const blockNumber = await this.web3.eth.getBlockNumber();\n      const gasPrice = await this.web3.eth.getGasPrice();\n      return {\n        chainId,\n        blockNumber,\n        gasPrice: this.web3.utils.fromWei(gasPrice, 'gwei') + ' Gwei',\n        account: this.account,\n        isConnected: this.isConnected\n      };\n    } catch (error) {\n      console.error('Failed to get network info:', error);\n      return null;\n    }\n  }\n\n  // Get contract addresses for reference\n  getContractAddresses() {\n    return CONTRACTS;\n  }\n\n  // Check if user has MetaMask\n  static hasMetaMask() {\n    return typeof window.ethereum !== 'undefined';\n  }\n\n  // Format blockchain addresses for display\n  static formatAddress(address) {\n    if (!address) return '';\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  }\n\n  // Convert wei to ether for display\n  weiToEther(wei) {\n    return this.web3.utils.fromWei(wei.toString(), 'ether');\n  }\n\n  // Convert ether to wei for transactions\n  etherToWei(ether) {\n    return this.web3.utils.toWei(ether.toString(), 'ether');\n  }\n}\n\n// Export singleton instance\nexport const blockchainService = new BlockchainService();\nexport default blockchainService;","map":{"version":3,"names":["Web3","CONTRACTS","ProjectRegistry","CarbonCreditToken","UniqueCarbonCreditNFT","PaymentDistributor","VerificationOracle","POLYGON_AMOY","chainId","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","PROJECT_REGISTRY_ABI","CARBON_CREDIT_TOKEN_ABI","BlockchainService","constructor","web3","account","contracts","isConnected","init","window","ethereum","accounts","request","method","switchToPolygonAmoy","initializeContracts","console","log","network","eth","getChainId","error","params","switchError","code","projectRegistry","Contract","carbonCreditToken","registerProject","projectData","_tx$events$ProjectReg","_tx$events$ProjectReg2","Error","title","description","ecosystem_type","location","area_hectares","community_wallets","ipfs_hash","estimated_credits","ecosystemTypeMap","ecosystemTypeNum","toLowerCase","ecosystemType","areaHectares","estimatedCredits","tx","methods","utils","toWei","toString","send","from","gas","transactionHash","projectId","events","ProjectRegistered","returnValues","success","blockNumber","message","getProject","project","call","id","areaInHectares","fromWei","projectOwner","communityWallets","status","createdAt","Date","parseInt","approvedAt","estimatedCarbonCredits","totalCarbonCredits","isActive","approveProject","mintCarbonCredits","amount","batchId","mint","now","getCarbonCreditBalance","address","accountAddress","balance","balanceOf","getTotalCarbonCredits","total","totalSupply","getUserProjects","projectIds","getProjectsByOwner","projects","Promise","all","map","getTotalProjectsCount","count","getTotalProjects","subscribeToProjectEvents","callback","fromBlock","on","event","ProjectApproved","transferCarbonCredits","toAddress","transfer","getNetworkInfo","getBlockNumber","gasPrice","getGasPrice","getContractAddresses","hasMetaMask","formatAddress","slice","weiToEther","wei","etherToWei","ether","blockchainService"],"sources":["/Users/razashaikh/Desktop/sih/python-app/frontend/src/services/blockchain.js"],"sourcesContent":["import Web3 from 'web3';\n\n// Contract addresses from deployed contracts on Polygon Amoy\nconst CONTRACTS = {\n  ProjectRegistry: '0x331A9336B7855E32B46F78053a963dc7FB6e3281',\n  CarbonCreditToken: '0x50DB160bb4dfA789D600b5Be7eD80f66993b7620',\n  UniqueCarbonCreditNFT: '0x8cB6Db9a056D2C9cEaD3860B2035ed0FEDaBE2Db',\n  PaymentDistributor: '0xC69d14B24D6330fBA0a7527fc0da64199E038a6f',\n  VerificationOracle: '0x0313771d7FB6A6460D7144eC660E2949eEdd515e'\n};\n\n// Polygon Amoy testnet configuration\nconst POLYGON_AMOY = {\n  chainId: '0x13882', // 80002 in hex\n  chainName: 'Polygon Amoy Testnet',\n  nativeCurrency: {\n    name: 'MATIC',\n    symbol: 'MATIC',\n    decimals: 18,\n  },\n  rpcUrls: ['https://rpc-amoy.polygon.technology/'],\n  blockExplorerUrls: ['https://amoy.polygonscan.com/'],\n};\n\n// ProjectRegistry ABI (simplified for common functions)\nconst PROJECT_REGISTRY_ABI = [\n  {\n    \"inputs\": [\n      {\"internalType\": \"string\", \"name\": \"_name\", \"type\": \"string\"},\n      {\"internalType\": \"string\", \"name\": \"_description\", \"type\": \"string\"},\n      {\"internalType\": \"uint8\", \"name\": \"_ecosystemType\", \"type\": \"uint8\"},\n      {\"internalType\": \"string\", \"name\": \"_location\", \"type\": \"string\"},\n      {\"internalType\": \"uint256\", \"name\": \"_areaInHectares\", \"type\": \"uint256\"},\n      {\"internalType\": \"address[]\", \"name\": \"_communityWallets\", \"type\": \"address[]\"},\n      {\"internalType\": \"string\", \"name\": \"_ipfsHashMetadata\", \"type\": \"string\"},\n      {\"internalType\": \"uint256\", \"name\": \"_estimatedCarbonCredits\", \"type\": \"uint256\"}\n    ],\n    \"name\": \"registerProject\",\n    \"outputs\": [{\"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\"}],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [{\"internalType\": \"uint256\", \"name\": \"_projectId\", \"type\": \"uint256\"}],\n    \"name\": \"getProject\",\n    \"outputs\": [\n      {\n        \"components\": [\n          {\"internalType\": \"uint256\", \"name\": \"id\", \"type\": \"uint256\"},\n          {\"internalType\": \"string\", \"name\": \"name\", \"type\": \"string\"},\n          {\"internalType\": \"string\", \"name\": \"description\", \"type\": \"string\"},\n          {\"internalType\": \"uint8\", \"name\": \"ecosystemType\", \"type\": \"uint8\"},\n          {\"internalType\": \"string\", \"name\": \"location\", \"type\": \"string\"},\n          {\"internalType\": \"uint256\", \"name\": \"areaInHectares\", \"type\": \"uint256\"},\n          {\"internalType\": \"address\", \"name\": \"projectOwner\", \"type\": \"address\"},\n          {\"internalType\": \"address[]\", \"name\": \"communityWallets\", \"type\": \"address[]\"},\n          {\"internalType\": \"address[]\", \"name\": \"verifiers\", \"type\": \"address[]\"},\n          {\"internalType\": \"uint8\", \"name\": \"status\", \"type\": \"uint8\"},\n          {\"internalType\": \"uint256\", \"name\": \"createdAt\", \"type\": \"uint256\"},\n          {\"internalType\": \"uint256\", \"name\": \"approvedAt\", \"type\": \"uint256\"},\n          {\"internalType\": \"string\", \"name\": \"ipfsHashMetadata\", \"type\": \"string\"},\n          {\"internalType\": \"uint256\", \"name\": \"estimatedCarbonCredits\", \"type\": \"uint256\"},\n          {\"internalType\": \"uint256\", \"name\": \"totalCarbonCredits\", \"type\": \"uint256\"},\n          {\"internalType\": \"bool\", \"name\": \"isActive\", \"type\": \"bool\"}\n        ],\n        \"internalType\": \"struct ProjectRegistry.Project\",\n        \"name\": \"\",\n        \"type\": \"tuple\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [{\"internalType\": \"uint256\", \"name\": \"_projectId\", \"type\": \"uint256\"}],\n    \"name\": \"approveProject\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"getTotalProjects\",\n    \"outputs\": [{\"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\"}],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [{\"internalType\": \"address\", \"name\": \"_owner\", \"type\": \"address\"}],\n    \"name\": \"getProjectsByOwner\",\n    \"outputs\": [{\"internalType\": \"uint256[]\", \"name\": \"\", \"type\": \"uint256[]\"}],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n];\n\n// Carbon Credit Token ABI (ERC-20 functions)\nconst CARBON_CREDIT_TOKEN_ABI = [\n  {\n    \"inputs\": [\n      {\"internalType\": \"address\", \"name\": \"_to\", \"type\": \"address\"},\n      {\"internalType\": \"uint256\", \"name\": \"_amount\", \"type\": \"uint256\"},\n      {\"internalType\": \"uint256\", \"name\": \"_projectId\", \"type\": \"uint256\"},\n      {\"internalType\": \"string\", \"name\": \"_batchId\", \"type\": \"string\"}\n    ],\n    \"name\": \"mint\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [{\"internalType\": \"address\", \"name\": \"account\", \"type\": \"address\"}],\n    \"name\": \"balanceOf\",\n    \"outputs\": [{\"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\"}],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"totalSupply\",\n    \"outputs\": [{\"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\"}],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\"},\n      {\"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\"}\n    ],\n    \"name\": \"transfer\",\n    \"outputs\": [{\"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\"}],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n];\n\nclass BlockchainService {\n  constructor() {\n    this.web3 = null;\n    this.account = null;\n    this.contracts = {};\n    this.isConnected = false;\n  }\n\n  // Initialize Web3 and connect to MetaMask\n  async init() {\n    try {\n      if (typeof window.ethereum !== 'undefined') {\n        this.web3 = new Web3(window.ethereum);\n        \n        // Request account access if needed\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n        \n        this.account = accounts[0];\n        this.isConnected = true;\n        \n        // Switch to Polygon Amoy testnet if needed\n        await this.switchToPolygonAmoy();\n        \n        // Initialize contracts\n        this.initializeContracts();\n        \n        console.log('🌊 Blockchain service initialized:', {\n          account: this.account,\n          network: await this.web3.eth.getChainId()\n        });\n        \n        return true;\n      } else {\n        console.error('MetaMask not detected');\n        return false;\n      }\n    } catch (error) {\n      console.error('Failed to initialize blockchain service:', error);\n      return false;\n    }\n  }\n\n  // Switch to Polygon Amoy testnet\n  async switchToPolygonAmoy() {\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: POLYGON_AMOY.chainId }],\n      });\n    } catch (switchError) {\n      // Add the network if it doesn't exist\n      if (switchError.code === 4902) {\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [POLYGON_AMOY],\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n\n  // Initialize smart contracts\n  initializeContracts() {\n    this.contracts.projectRegistry = new this.web3.eth.Contract(\n      PROJECT_REGISTRY_ABI,\n      CONTRACTS.ProjectRegistry\n    );\n    \n    this.contracts.carbonCreditToken = new this.web3.eth.Contract(\n      CARBON_CREDIT_TOKEN_ABI,\n      CONTRACTS.CarbonCreditToken\n    );\n  }\n\n  // Register a new project on blockchain\n  async registerProject(projectData) {\n    try {\n      if (!this.isConnected) {\n        throw new Error('Blockchain service not connected');\n      }\n\n      const {\n        title: name,\n        description,\n        ecosystem_type,\n        location,\n        area_hectares,\n        community_wallets = [],\n        ipfs_hash = '',\n        estimated_credits = 0\n      } = projectData;\n\n      // Convert ecosystem type to number (0: Mangrove, 1: Seagrass, 2: Saltmarsh)\n      const ecosystemTypeMap = {\n        'mangrove': 0,\n        'seagrass': 1,\n        'saltmarsh': 2\n      };\n      const ecosystemTypeNum = ecosystemTypeMap[ecosystem_type?.toLowerCase()] || 0;\n\n      console.log('🚀 Registering project on blockchain:', {\n        name,\n        ecosystemType: ecosystemTypeNum,\n        areaHectares: area_hectares,\n        estimatedCredits: estimated_credits\n      });\n\n      const tx = await this.contracts.projectRegistry.methods\n        .registerProject(\n          name,\n          description,\n          ecosystemTypeNum,\n          location,\n          this.web3.utils.toWei(area_hectares.toString(), 'ether'), // Convert to wei for precision\n          community_wallets,\n          ipfs_hash,\n          estimated_credits\n        )\n        .send({\n          from: this.account,\n          gas: 500000\n        });\n\n      console.log('✅ Project registered on blockchain:', tx.transactionHash);\n      \n      // Get project ID from events\n      const projectId = tx.events.ProjectRegistered?.returnValues?.projectId;\n      \n      return {\n        success: true,\n        transactionHash: tx.transactionHash,\n        projectId: projectId,\n        blockNumber: tx.blockNumber\n      };\n    } catch (error) {\n      console.error('❌ Failed to register project on blockchain:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Get project details from blockchain\n  async getProject(projectId) {\n    try {\n      const project = await this.contracts.projectRegistry.methods\n        .getProject(projectId)\n        .call();\n      \n      return {\n        id: project.id,\n        name: project.name,\n        description: project.description,\n        ecosystemType: project.ecosystemType,\n        location: project.location,\n        areaInHectares: this.web3.utils.fromWei(project.areaInHectares, 'ether'),\n        projectOwner: project.projectOwner,\n        communityWallets: project.communityWallets,\n        status: project.status,\n        createdAt: new Date(parseInt(project.createdAt) * 1000),\n        approvedAt: project.approvedAt > 0 ? new Date(parseInt(project.approvedAt) * 1000) : null,\n        estimatedCarbonCredits: project.estimatedCarbonCredits,\n        totalCarbonCredits: project.totalCarbonCredits,\n        isActive: project.isActive\n      };\n    } catch (error) {\n      console.error('Failed to get project from blockchain:', error);\n      throw error;\n    }\n  }\n\n  // Approve a project (admin function)\n  async approveProject(projectId) {\n    try {\n      const tx = await this.contracts.projectRegistry.methods\n        .approveProject(projectId)\n        .send({\n          from: this.account,\n          gas: 200000\n        });\n\n      return {\n        success: true,\n        transactionHash: tx.transactionHash\n      };\n    } catch (error) {\n      console.error('Failed to approve project:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Mint carbon credits for a project\n  async mintCarbonCredits(projectId, amount, batchId = '') {\n    try {\n      const tx = await this.contracts.carbonCreditToken.methods\n        .mint(\n          this.account, // Mint to current account\n          amount,\n          projectId,\n          batchId || `batch_${Date.now()}`\n        )\n        .send({\n          from: this.account,\n          gas: 300000\n        });\n\n      return {\n        success: true,\n        transactionHash: tx.transactionHash,\n        amount: amount\n      };\n    } catch (error) {\n      console.error('Failed to mint carbon credits:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Get carbon credit balance\n  async getCarbonCreditBalance(address = null) {\n    try {\n      const accountAddress = address || this.account;\n      const balance = await this.contracts.carbonCreditToken.methods\n        .balanceOf(accountAddress)\n        .call();\n      \n      return parseInt(balance);\n    } catch (error) {\n      console.error('Failed to get carbon credit balance:', error);\n      return 0;\n    }\n  }\n\n  // Get total carbon credits in circulation\n  async getTotalCarbonCredits() {\n    try {\n      const total = await this.contracts.carbonCreditToken.methods\n        .totalSupply()\n        .call();\n      \n      return parseInt(total);\n    } catch (error) {\n      console.error('Failed to get total carbon credits:', error);\n      return 0;\n    }\n  }\n\n  // Get user's projects\n  async getUserProjects(address = null) {\n    try {\n      const accountAddress = address || this.account;\n      const projectIds = await this.contracts.projectRegistry.methods\n        .getProjectsByOwner(accountAddress)\n        .call();\n      \n      // Get full project details for each ID\n      const projects = await Promise.all(\n        projectIds.map(id => this.getProject(id))\n      );\n      \n      return projects;\n    } catch (error) {\n      console.error('Failed to get user projects:', error);\n      return [];\n    }\n  }\n\n  // Get total projects count\n  async getTotalProjectsCount() {\n    try {\n      const count = await this.contracts.projectRegistry.methods\n        .getTotalProjects()\n        .call();\n      \n      return parseInt(count);\n    } catch (error) {\n      console.error('Failed to get total projects count:', error);\n      return 0;\n    }\n  }\n\n  // Listen to blockchain events\n  subscribeToProjectEvents(callback) {\n    if (!this.contracts.projectRegistry) return;\n\n    this.contracts.projectRegistry.events.ProjectRegistered({\n      fromBlock: 'latest'\n    })\n    .on('data', (event) => {\n      callback('ProjectRegistered', event.returnValues);\n    })\n    .on('error', console.error);\n\n    this.contracts.projectRegistry.events.ProjectApproved({\n      fromBlock: 'latest'\n    })\n    .on('data', (event) => {\n      callback('ProjectApproved', event.returnValues);\n    })\n    .on('error', console.error);\n  }\n\n  // Transfer carbon credits\n  async transferCarbonCredits(toAddress, amount) {\n    try {\n      const tx = await this.contracts.carbonCreditToken.methods\n        .transfer(toAddress, amount)\n        .send({\n          from: this.account,\n          gas: 200000\n        });\n\n      return {\n        success: true,\n        transactionHash: tx.transactionHash\n      };\n    } catch (error) {\n      console.error('Failed to transfer carbon credits:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Get blockchain network info\n  async getNetworkInfo() {\n    try {\n      const chainId = await this.web3.eth.getChainId();\n      const blockNumber = await this.web3.eth.getBlockNumber();\n      const gasPrice = await this.web3.eth.getGasPrice();\n\n      return {\n        chainId,\n        blockNumber,\n        gasPrice: this.web3.utils.fromWei(gasPrice, 'gwei') + ' Gwei',\n        account: this.account,\n        isConnected: this.isConnected\n      };\n    } catch (error) {\n      console.error('Failed to get network info:', error);\n      return null;\n    }\n  }\n\n  // Get contract addresses for reference\n  getContractAddresses() {\n    return CONTRACTS;\n  }\n\n  // Check if user has MetaMask\n  static hasMetaMask() {\n    return typeof window.ethereum !== 'undefined';\n  }\n\n  // Format blockchain addresses for display\n  static formatAddress(address) {\n    if (!address) return '';\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  }\n\n  // Convert wei to ether for display\n  weiToEther(wei) {\n    return this.web3.utils.fromWei(wei.toString(), 'ether');\n  }\n\n  // Convert ether to wei for transactions\n  etherToWei(ether) {\n    return this.web3.utils.toWei(ether.toString(), 'ether');\n  }\n}\n\n// Export singleton instance\nexport const blockchainService = new BlockchainService();\nexport default blockchainService;"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;;AAEvB;AACA,MAAMC,SAAS,GAAG;EAChBC,eAAe,EAAE,4CAA4C;EAC7DC,iBAAiB,EAAE,4CAA4C;EAC/DC,qBAAqB,EAAE,4CAA4C;EACnEC,kBAAkB,EAAE,4CAA4C;EAChEC,kBAAkB,EAAE;AACtB,CAAC;;AAED;AACA,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,SAAS;EAAE;EACpBC,SAAS,EAAE,sBAAsB;EACjCC,cAAc,EAAE;IACdC,IAAI,EAAE,OAAO;IACbC,MAAM,EAAE,OAAO;IACfC,QAAQ,EAAE;EACZ,CAAC;EACDC,OAAO,EAAE,CAAC,sCAAsC,CAAC;EACjDC,iBAAiB,EAAE,CAAC,+BAA+B;AACrD,CAAC;;AAED;AACA,MAAMC,oBAAoB,GAAG,CAC3B;EACE,QAAQ,EAAE,CACR;IAAC,cAAc,EAAE,QAAQ;IAAE,MAAM,EAAE,OAAO;IAAE,MAAM,EAAE;EAAQ,CAAC,EAC7D;IAAC,cAAc,EAAE,QAAQ;IAAE,MAAM,EAAE,cAAc;IAAE,MAAM,EAAE;EAAQ,CAAC,EACpE;IAAC,cAAc,EAAE,OAAO;IAAE,MAAM,EAAE,gBAAgB;IAAE,MAAM,EAAE;EAAO,CAAC,EACpE;IAAC,cAAc,EAAE,QAAQ;IAAE,MAAM,EAAE,WAAW;IAAE,MAAM,EAAE;EAAQ,CAAC,EACjE;IAAC,cAAc,EAAE,SAAS;IAAE,MAAM,EAAE,iBAAiB;IAAE,MAAM,EAAE;EAAS,CAAC,EACzE;IAAC,cAAc,EAAE,WAAW;IAAE,MAAM,EAAE,mBAAmB;IAAE,MAAM,EAAE;EAAW,CAAC,EAC/E;IAAC,cAAc,EAAE,QAAQ;IAAE,MAAM,EAAE,mBAAmB;IAAE,MAAM,EAAE;EAAQ,CAAC,EACzE;IAAC,cAAc,EAAE,SAAS;IAAE,MAAM,EAAE,yBAAyB;IAAE,MAAM,EAAE;EAAS,CAAC,CAClF;EACD,MAAM,EAAE,iBAAiB;EACzB,SAAS,EAAE,CAAC;IAAC,cAAc,EAAE,SAAS;IAAE,MAAM,EAAE,EAAE;IAAE,MAAM,EAAE;EAAS,CAAC,CAAC;EACvE,iBAAiB,EAAE,YAAY;EAC/B,MAAM,EAAE;AACV,CAAC,EACD;EACE,QAAQ,EAAE,CAAC;IAAC,cAAc,EAAE,SAAS;IAAE,MAAM,EAAE,YAAY;IAAE,MAAM,EAAE;EAAS,CAAC,CAAC;EAChF,MAAM,EAAE,YAAY;EACpB,SAAS,EAAE,CACT;IACE,YAAY,EAAE,CACZ;MAAC,cAAc,EAAE,SAAS;MAAE,MAAM,EAAE,IAAI;MAAE,MAAM,EAAE;IAAS,CAAC,EAC5D;MAAC,cAAc,EAAE,QAAQ;MAAE,MAAM,EAAE,MAAM;MAAE,MAAM,EAAE;IAAQ,CAAC,EAC5D;MAAC,cAAc,EAAE,QAAQ;MAAE,MAAM,EAAE,aAAa;MAAE,MAAM,EAAE;IAAQ,CAAC,EACnE;MAAC,cAAc,EAAE,OAAO;MAAE,MAAM,EAAE,eAAe;MAAE,MAAM,EAAE;IAAO,CAAC,EACnE;MAAC,cAAc,EAAE,QAAQ;MAAE,MAAM,EAAE,UAAU;MAAE,MAAM,EAAE;IAAQ,CAAC,EAChE;MAAC,cAAc,EAAE,SAAS;MAAE,MAAM,EAAE,gBAAgB;MAAE,MAAM,EAAE;IAAS,CAAC,EACxE;MAAC,cAAc,EAAE,SAAS;MAAE,MAAM,EAAE,cAAc;MAAE,MAAM,EAAE;IAAS,CAAC,EACtE;MAAC,cAAc,EAAE,WAAW;MAAE,MAAM,EAAE,kBAAkB;MAAE,MAAM,EAAE;IAAW,CAAC,EAC9E;MAAC,cAAc,EAAE,WAAW;MAAE,MAAM,EAAE,WAAW;MAAE,MAAM,EAAE;IAAW,CAAC,EACvE;MAAC,cAAc,EAAE,OAAO;MAAE,MAAM,EAAE,QAAQ;MAAE,MAAM,EAAE;IAAO,CAAC,EAC5D;MAAC,cAAc,EAAE,SAAS;MAAE,MAAM,EAAE,WAAW;MAAE,MAAM,EAAE;IAAS,CAAC,EACnE;MAAC,cAAc,EAAE,SAAS;MAAE,MAAM,EAAE,YAAY;MAAE,MAAM,EAAE;IAAS,CAAC,EACpE;MAAC,cAAc,EAAE,QAAQ;MAAE,MAAM,EAAE,kBAAkB;MAAE,MAAM,EAAE;IAAQ,CAAC,EACxE;MAAC,cAAc,EAAE,SAAS;MAAE,MAAM,EAAE,wBAAwB;MAAE,MAAM,EAAE;IAAS,CAAC,EAChF;MAAC,cAAc,EAAE,SAAS;MAAE,MAAM,EAAE,oBAAoB;MAAE,MAAM,EAAE;IAAS,CAAC,EAC5E;MAAC,cAAc,EAAE,MAAM;MAAE,MAAM,EAAE,UAAU;MAAE,MAAM,EAAE;IAAM,CAAC,CAC7D;IACD,cAAc,EAAE,gCAAgC;IAChD,MAAM,EAAE,EAAE;IACV,MAAM,EAAE;EACV,CAAC,CACF;EACD,iBAAiB,EAAE,MAAM;EACzB,MAAM,EAAE;AACV,CAAC,EACD;EACE,QAAQ,EAAE,CAAC;IAAC,cAAc,EAAE,SAAS;IAAE,MAAM,EAAE,YAAY;IAAE,MAAM,EAAE;EAAS,CAAC,CAAC;EAChF,MAAM,EAAE,gBAAgB;EACxB,SAAS,EAAE,EAAE;EACb,iBAAiB,EAAE,YAAY;EAC/B,MAAM,EAAE;AACV,CAAC,EACD;EACE,QAAQ,EAAE,EAAE;EACZ,MAAM,EAAE,kBAAkB;EAC1B,SAAS,EAAE,CAAC;IAAC,cAAc,EAAE,SAAS;IAAE,MAAM,EAAE,EAAE;IAAE,MAAM,EAAE;EAAS,CAAC,CAAC;EACvE,iBAAiB,EAAE,MAAM;EACzB,MAAM,EAAE;AACV,CAAC,EACD;EACE,QAAQ,EAAE,CAAC;IAAC,cAAc,EAAE,SAAS;IAAE,MAAM,EAAE,QAAQ;IAAE,MAAM,EAAE;EAAS,CAAC,CAAC;EAC5E,MAAM,EAAE,oBAAoB;EAC5B,SAAS,EAAE,CAAC;IAAC,cAAc,EAAE,WAAW;IAAE,MAAM,EAAE,EAAE;IAAE,MAAM,EAAE;EAAW,CAAC,CAAC;EAC3E,iBAAiB,EAAE,MAAM;EACzB,MAAM,EAAE;AACV,CAAC,CACF;;AAED;AACA,MAAMC,uBAAuB,GAAG,CAC9B;EACE,QAAQ,EAAE,CACR;IAAC,cAAc,EAAE,SAAS;IAAE,MAAM,EAAE,KAAK;IAAE,MAAM,EAAE;EAAS,CAAC,EAC7D;IAAC,cAAc,EAAE,SAAS;IAAE,MAAM,EAAE,SAAS;IAAE,MAAM,EAAE;EAAS,CAAC,EACjE;IAAC,cAAc,EAAE,SAAS;IAAE,MAAM,EAAE,YAAY;IAAE,MAAM,EAAE;EAAS,CAAC,EACpE;IAAC,cAAc,EAAE,QAAQ;IAAE,MAAM,EAAE,UAAU;IAAE,MAAM,EAAE;EAAQ,CAAC,CACjE;EACD,MAAM,EAAE,MAAM;EACd,SAAS,EAAE,EAAE;EACb,iBAAiB,EAAE,YAAY;EAC/B,MAAM,EAAE;AACV,CAAC,EACD;EACE,QAAQ,EAAE,CAAC;IAAC,cAAc,EAAE,SAAS;IAAE,MAAM,EAAE,SAAS;IAAE,MAAM,EAAE;EAAS,CAAC,CAAC;EAC7E,MAAM,EAAE,WAAW;EACnB,SAAS,EAAE,CAAC;IAAC,cAAc,EAAE,SAAS;IAAE,MAAM,EAAE,EAAE;IAAE,MAAM,EAAE;EAAS,CAAC,CAAC;EACvE,iBAAiB,EAAE,MAAM;EACzB,MAAM,EAAE;AACV,CAAC,EACD;EACE,QAAQ,EAAE,EAAE;EACZ,MAAM,EAAE,aAAa;EACrB,SAAS,EAAE,CAAC;IAAC,cAAc,EAAE,SAAS;IAAE,MAAM,EAAE,EAAE;IAAE,MAAM,EAAE;EAAS,CAAC,CAAC;EACvE,iBAAiB,EAAE,MAAM;EACzB,MAAM,EAAE;AACV,CAAC,EACD;EACE,QAAQ,EAAE,CACR;IAAC,cAAc,EAAE,SAAS;IAAE,MAAM,EAAE,IAAI;IAAE,MAAM,EAAE;EAAS,CAAC,EAC5D;IAAC,cAAc,EAAE,SAAS;IAAE,MAAM,EAAE,QAAQ;IAAE,MAAM,EAAE;EAAS,CAAC,CACjE;EACD,MAAM,EAAE,UAAU;EAClB,SAAS,EAAE,CAAC;IAAC,cAAc,EAAE,MAAM;IAAE,MAAM,EAAE,EAAE;IAAE,MAAM,EAAE;EAAM,CAAC,CAAC;EACjE,iBAAiB,EAAE,YAAY;EAC/B,MAAM,EAAE;AACV,CAAC,CACF;AAED,MAAMC,iBAAiB,CAAC;EACtBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,IAAI,GAAG,IAAI;IAChB,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;IACnB,IAAI,CAACC,WAAW,GAAG,KAAK;EAC1B;;EAEA;EACA,MAAMC,IAAIA,CAAA,EAAG;IACX,IAAI;MACF,IAAI,OAAOC,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;QAC1C,IAAI,CAACN,IAAI,GAAG,IAAIpB,IAAI,CAACyB,MAAM,CAACC,QAAQ,CAAC;;QAErC;QACA,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;UAC7CC,MAAM,EAAE;QACV,CAAC,CAAC;QAEF,IAAI,CAACR,OAAO,GAAGM,QAAQ,CAAC,CAAC,CAAC;QAC1B,IAAI,CAACJ,WAAW,GAAG,IAAI;;QAEvB;QACA,MAAM,IAAI,CAACO,mBAAmB,CAAC,CAAC;;QAEhC;QACA,IAAI,CAACC,mBAAmB,CAAC,CAAC;QAE1BC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAE;UAChDZ,OAAO,EAAE,IAAI,CAACA,OAAO;UACrBa,OAAO,EAAE,MAAM,IAAI,CAACd,IAAI,CAACe,GAAG,CAACC,UAAU,CAAC;QAC1C,CAAC,CAAC;QAEF,OAAO,IAAI;MACb,CAAC,MAAM;QACLJ,OAAO,CAACK,KAAK,CAAC,uBAAuB,CAAC;QACtC,OAAO,KAAK;MACd;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAChE,OAAO,KAAK;IACd;EACF;;EAEA;EACA,MAAMP,mBAAmBA,CAAA,EAAG;IAC1B,IAAI;MACF,MAAML,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;QAC5BC,MAAM,EAAE,4BAA4B;QACpCS,MAAM,EAAE,CAAC;UAAE9B,OAAO,EAAED,YAAY,CAACC;QAAQ,CAAC;MAC5C,CAAC,CAAC;IACJ,CAAC,CAAC,OAAO+B,WAAW,EAAE;MACpB;MACA,IAAIA,WAAW,CAACC,IAAI,KAAK,IAAI,EAAE;QAC7B,MAAMf,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;UAC5BC,MAAM,EAAE,yBAAyB;UACjCS,MAAM,EAAE,CAAC/B,YAAY;QACvB,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,MAAMgC,WAAW;MACnB;IACF;EACF;;EAEA;EACAR,mBAAmBA,CAAA,EAAG;IACpB,IAAI,CAACT,SAAS,CAACmB,eAAe,GAAG,IAAI,IAAI,CAACrB,IAAI,CAACe,GAAG,CAACO,QAAQ,CACzD1B,oBAAoB,EACpBf,SAAS,CAACC,eACZ,CAAC;IAED,IAAI,CAACoB,SAAS,CAACqB,iBAAiB,GAAG,IAAI,IAAI,CAACvB,IAAI,CAACe,GAAG,CAACO,QAAQ,CAC3DzB,uBAAuB,EACvBhB,SAAS,CAACE,iBACZ,CAAC;EACH;;EAEA;EACA,MAAMyC,eAAeA,CAACC,WAAW,EAAE;IACjC,IAAI;MAAA,IAAAC,qBAAA,EAAAC,sBAAA;MACF,IAAI,CAAC,IAAI,CAACxB,WAAW,EAAE;QACrB,MAAM,IAAIyB,KAAK,CAAC,kCAAkC,CAAC;MACrD;MAEA,MAAM;QACJC,KAAK,EAAEtC,IAAI;QACXuC,WAAW;QACXC,cAAc;QACdC,QAAQ;QACRC,aAAa;QACbC,iBAAiB,GAAG,EAAE;QACtBC,SAAS,GAAG,EAAE;QACdC,iBAAiB,GAAG;MACtB,CAAC,GAAGX,WAAW;;MAEf;MACA,MAAMY,gBAAgB,GAAG;QACvB,UAAU,EAAE,CAAC;QACb,UAAU,EAAE,CAAC;QACb,WAAW,EAAE;MACf,CAAC;MACD,MAAMC,gBAAgB,GAAGD,gBAAgB,CAACN,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEQ,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC;MAE7E3B,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAE;QACnDtB,IAAI;QACJiD,aAAa,EAAEF,gBAAgB;QAC/BG,YAAY,EAAER,aAAa;QAC3BS,gBAAgB,EAAEN;MACpB,CAAC,CAAC;MAEF,MAAMO,EAAE,GAAG,MAAM,IAAI,CAACzC,SAAS,CAACmB,eAAe,CAACuB,OAAO,CACpDpB,eAAe,CACdjC,IAAI,EACJuC,WAAW,EACXQ,gBAAgB,EAChBN,QAAQ,EACR,IAAI,CAAChC,IAAI,CAAC6C,KAAK,CAACC,KAAK,CAACb,aAAa,CAACc,QAAQ,CAAC,CAAC,EAAE,OAAO,CAAC;MAAE;MAC1Db,iBAAiB,EACjBC,SAAS,EACTC,iBACF,CAAC,CACAY,IAAI,CAAC;QACJC,IAAI,EAAE,IAAI,CAAChD,OAAO;QAClBiD,GAAG,EAAE;MACP,CAAC,CAAC;MAEJtC,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAE8B,EAAE,CAACQ,eAAe,CAAC;;MAEtE;MACA,MAAMC,SAAS,IAAA1B,qBAAA,GAAGiB,EAAE,CAACU,MAAM,CAACC,iBAAiB,cAAA5B,qBAAA,wBAAAC,sBAAA,GAA3BD,qBAAA,CAA6B6B,YAAY,cAAA5B,sBAAA,uBAAzCA,sBAAA,CAA2CyB,SAAS;MAEtE,OAAO;QACLI,OAAO,EAAE,IAAI;QACbL,eAAe,EAAER,EAAE,CAACQ,eAAe;QACnCC,SAAS,EAAEA,SAAS;QACpBK,WAAW,EAAEd,EAAE,CAACc;MAClB,CAAC;IACH,CAAC,CAAC,OAAOxC,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACnE,OAAO;QACLuC,OAAO,EAAE,KAAK;QACdvC,KAAK,EAAEA,KAAK,CAACyC;MACf,CAAC;IACH;EACF;;EAEA;EACA,MAAMC,UAAUA,CAACP,SAAS,EAAE;IAC1B,IAAI;MACF,MAAMQ,OAAO,GAAG,MAAM,IAAI,CAAC1D,SAAS,CAACmB,eAAe,CAACuB,OAAO,CACzDe,UAAU,CAACP,SAAS,CAAC,CACrBS,IAAI,CAAC,CAAC;MAET,OAAO;QACLC,EAAE,EAAEF,OAAO,CAACE,EAAE;QACdvE,IAAI,EAAEqE,OAAO,CAACrE,IAAI;QAClBuC,WAAW,EAAE8B,OAAO,CAAC9B,WAAW;QAChCU,aAAa,EAAEoB,OAAO,CAACpB,aAAa;QACpCR,QAAQ,EAAE4B,OAAO,CAAC5B,QAAQ;QAC1B+B,cAAc,EAAE,IAAI,CAAC/D,IAAI,CAAC6C,KAAK,CAACmB,OAAO,CAACJ,OAAO,CAACG,cAAc,EAAE,OAAO,CAAC;QACxEE,YAAY,EAAEL,OAAO,CAACK,YAAY;QAClCC,gBAAgB,EAAEN,OAAO,CAACM,gBAAgB;QAC1CC,MAAM,EAAEP,OAAO,CAACO,MAAM;QACtBC,SAAS,EAAE,IAAIC,IAAI,CAACC,QAAQ,CAACV,OAAO,CAACQ,SAAS,CAAC,GAAG,IAAI,CAAC;QACvDG,UAAU,EAAEX,OAAO,CAACW,UAAU,GAAG,CAAC,GAAG,IAAIF,IAAI,CAACC,QAAQ,CAACV,OAAO,CAACW,UAAU,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI;QACzFC,sBAAsB,EAAEZ,OAAO,CAACY,sBAAsB;QACtDC,kBAAkB,EAAEb,OAAO,CAACa,kBAAkB;QAC9CC,QAAQ,EAAEd,OAAO,CAACc;MACpB,CAAC;IACH,CAAC,CAAC,OAAOzD,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAC9D,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAM0D,cAAcA,CAACvB,SAAS,EAAE;IAC9B,IAAI;MACF,MAAMT,EAAE,GAAG,MAAM,IAAI,CAACzC,SAAS,CAACmB,eAAe,CAACuB,OAAO,CACpD+B,cAAc,CAACvB,SAAS,CAAC,CACzBJ,IAAI,CAAC;QACJC,IAAI,EAAE,IAAI,CAAChD,OAAO;QAClBiD,GAAG,EAAE;MACP,CAAC,CAAC;MAEJ,OAAO;QACLM,OAAO,EAAE,IAAI;QACbL,eAAe,EAAER,EAAE,CAACQ;MACtB,CAAC;IACH,CAAC,CAAC,OAAOlC,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAO;QACLuC,OAAO,EAAE,KAAK;QACdvC,KAAK,EAAEA,KAAK,CAACyC;MACf,CAAC;IACH;EACF;;EAEA;EACA,MAAMkB,iBAAiBA,CAACxB,SAAS,EAAEyB,MAAM,EAAEC,OAAO,GAAG,EAAE,EAAE;IACvD,IAAI;MACF,MAAMnC,EAAE,GAAG,MAAM,IAAI,CAACzC,SAAS,CAACqB,iBAAiB,CAACqB,OAAO,CACtDmC,IAAI,CACH,IAAI,CAAC9E,OAAO;MAAE;MACd4E,MAAM,EACNzB,SAAS,EACT0B,OAAO,IAAI,SAAST,IAAI,CAACW,GAAG,CAAC,CAAC,EAChC,CAAC,CACAhC,IAAI,CAAC;QACJC,IAAI,EAAE,IAAI,CAAChD,OAAO;QAClBiD,GAAG,EAAE;MACP,CAAC,CAAC;MAEJ,OAAO;QACLM,OAAO,EAAE,IAAI;QACbL,eAAe,EAAER,EAAE,CAACQ,eAAe;QACnC0B,MAAM,EAAEA;MACV,CAAC;IACH,CAAC,CAAC,OAAO5D,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,OAAO;QACLuC,OAAO,EAAE,KAAK;QACdvC,KAAK,EAAEA,KAAK,CAACyC;MACf,CAAC;IACH;EACF;;EAEA;EACA,MAAMuB,sBAAsBA,CAACC,OAAO,GAAG,IAAI,EAAE;IAC3C,IAAI;MACF,MAAMC,cAAc,GAAGD,OAAO,IAAI,IAAI,CAACjF,OAAO;MAC9C,MAAMmF,OAAO,GAAG,MAAM,IAAI,CAAClF,SAAS,CAACqB,iBAAiB,CAACqB,OAAO,CAC3DyC,SAAS,CAACF,cAAc,CAAC,CACzBtB,IAAI,CAAC,CAAC;MAET,OAAOS,QAAQ,CAACc,OAAO,CAAC;IAC1B,CAAC,CAAC,OAAOnE,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5D,OAAO,CAAC;IACV;EACF;;EAEA;EACA,MAAMqE,qBAAqBA,CAAA,EAAG;IAC5B,IAAI;MACF,MAAMC,KAAK,GAAG,MAAM,IAAI,CAACrF,SAAS,CAACqB,iBAAiB,CAACqB,OAAO,CACzD4C,WAAW,CAAC,CAAC,CACb3B,IAAI,CAAC,CAAC;MAET,OAAOS,QAAQ,CAACiB,KAAK,CAAC;IACxB,CAAC,CAAC,OAAOtE,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,OAAO,CAAC;IACV;EACF;;EAEA;EACA,MAAMwE,eAAeA,CAACP,OAAO,GAAG,IAAI,EAAE;IACpC,IAAI;MACF,MAAMC,cAAc,GAAGD,OAAO,IAAI,IAAI,CAACjF,OAAO;MAC9C,MAAMyF,UAAU,GAAG,MAAM,IAAI,CAACxF,SAAS,CAACmB,eAAe,CAACuB,OAAO,CAC5D+C,kBAAkB,CAACR,cAAc,CAAC,CAClCtB,IAAI,CAAC,CAAC;;MAET;MACA,MAAM+B,QAAQ,GAAG,MAAMC,OAAO,CAACC,GAAG,CAChCJ,UAAU,CAACK,GAAG,CAACjC,EAAE,IAAI,IAAI,CAACH,UAAU,CAACG,EAAE,CAAC,CAC1C,CAAC;MAED,OAAO8B,QAAQ;IACjB,CAAC,CAAC,OAAO3E,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAO,EAAE;IACX;EACF;;EAEA;EACA,MAAM+E,qBAAqBA,CAAA,EAAG;IAC5B,IAAI;MACF,MAAMC,KAAK,GAAG,MAAM,IAAI,CAAC/F,SAAS,CAACmB,eAAe,CAACuB,OAAO,CACvDsD,gBAAgB,CAAC,CAAC,CAClBrC,IAAI,CAAC,CAAC;MAET,OAAOS,QAAQ,CAAC2B,KAAK,CAAC;IACxB,CAAC,CAAC,OAAOhF,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,OAAO,CAAC;IACV;EACF;;EAEA;EACAkF,wBAAwBA,CAACC,QAAQ,EAAE;IACjC,IAAI,CAAC,IAAI,CAAClG,SAAS,CAACmB,eAAe,EAAE;IAErC,IAAI,CAACnB,SAAS,CAACmB,eAAe,CAACgC,MAAM,CAACC,iBAAiB,CAAC;MACtD+C,SAAS,EAAE;IACb,CAAC,CAAC,CACDC,EAAE,CAAC,MAAM,EAAGC,KAAK,IAAK;MACrBH,QAAQ,CAAC,mBAAmB,EAAEG,KAAK,CAAChD,YAAY,CAAC;IACnD,CAAC,CAAC,CACD+C,EAAE,CAAC,OAAO,EAAE1F,OAAO,CAACK,KAAK,CAAC;IAE3B,IAAI,CAACf,SAAS,CAACmB,eAAe,CAACgC,MAAM,CAACmD,eAAe,CAAC;MACpDH,SAAS,EAAE;IACb,CAAC,CAAC,CACDC,EAAE,CAAC,MAAM,EAAGC,KAAK,IAAK;MACrBH,QAAQ,CAAC,iBAAiB,EAAEG,KAAK,CAAChD,YAAY,CAAC;IACjD,CAAC,CAAC,CACD+C,EAAE,CAAC,OAAO,EAAE1F,OAAO,CAACK,KAAK,CAAC;EAC7B;;EAEA;EACA,MAAMwF,qBAAqBA,CAACC,SAAS,EAAE7B,MAAM,EAAE;IAC7C,IAAI;MACF,MAAMlC,EAAE,GAAG,MAAM,IAAI,CAACzC,SAAS,CAACqB,iBAAiB,CAACqB,OAAO,CACtD+D,QAAQ,CAACD,SAAS,EAAE7B,MAAM,CAAC,CAC3B7B,IAAI,CAAC;QACJC,IAAI,EAAE,IAAI,CAAChD,OAAO;QAClBiD,GAAG,EAAE;MACP,CAAC,CAAC;MAEJ,OAAO;QACLM,OAAO,EAAE,IAAI;QACbL,eAAe,EAAER,EAAE,CAACQ;MACtB,CAAC;IACH,CAAC,CAAC,OAAOlC,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,OAAO;QACLuC,OAAO,EAAE,KAAK;QACdvC,KAAK,EAAEA,KAAK,CAACyC;MACf,CAAC;IACH;EACF;;EAEA;EACA,MAAMkD,cAAcA,CAAA,EAAG;IACrB,IAAI;MACF,MAAMxH,OAAO,GAAG,MAAM,IAAI,CAACY,IAAI,CAACe,GAAG,CAACC,UAAU,CAAC,CAAC;MAChD,MAAMyC,WAAW,GAAG,MAAM,IAAI,CAACzD,IAAI,CAACe,GAAG,CAAC8F,cAAc,CAAC,CAAC;MACxD,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAAC9G,IAAI,CAACe,GAAG,CAACgG,WAAW,CAAC,CAAC;MAElD,OAAO;QACL3H,OAAO;QACPqE,WAAW;QACXqD,QAAQ,EAAE,IAAI,CAAC9G,IAAI,CAAC6C,KAAK,CAACmB,OAAO,CAAC8C,QAAQ,EAAE,MAAM,CAAC,GAAG,OAAO;QAC7D7G,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBE,WAAW,EAAE,IAAI,CAACA;MACpB,CAAC;IACH,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,OAAO,IAAI;IACb;EACF;;EAEA;EACA+F,oBAAoBA,CAAA,EAAG;IACrB,OAAOnI,SAAS;EAClB;;EAEA;EACA,OAAOoI,WAAWA,CAAA,EAAG;IACnB,OAAO,OAAO5G,MAAM,CAACC,QAAQ,KAAK,WAAW;EAC/C;;EAEA;EACA,OAAO4G,aAAaA,CAAChC,OAAO,EAAE;IAC5B,IAAI,CAACA,OAAO,EAAE,OAAO,EAAE;IACvB,OAAO,GAAGA,OAAO,CAACiC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,MAAMjC,OAAO,CAACiC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;EACxD;;EAEA;EACAC,UAAUA,CAACC,GAAG,EAAE;IACd,OAAO,IAAI,CAACrH,IAAI,CAAC6C,KAAK,CAACmB,OAAO,CAACqD,GAAG,CAACtE,QAAQ,CAAC,CAAC,EAAE,OAAO,CAAC;EACzD;;EAEA;EACAuE,UAAUA,CAACC,KAAK,EAAE;IAChB,OAAO,IAAI,CAACvH,IAAI,CAAC6C,KAAK,CAACC,KAAK,CAACyE,KAAK,CAACxE,QAAQ,CAAC,CAAC,EAAE,OAAO,CAAC;EACzD;AACF;;AAEA;AACA,OAAO,MAAMyE,iBAAiB,GAAG,IAAI1H,iBAAiB,CAAC,CAAC;AACxD,eAAe0H,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}