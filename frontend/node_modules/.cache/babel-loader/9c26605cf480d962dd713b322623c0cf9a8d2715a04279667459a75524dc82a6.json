{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8002';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add auth token to requests if available\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// API Functions\n\n// Project Management\nexport const projectAPI = {\n  create: async projectData => {\n    const response = await apiClient.post('/api/projects/create', projectData);\n    return response.data;\n  },\n  getById: async projectId => {\n    const response = await apiClient.get(`/api/projects/${projectId}`);\n    return response.data;\n  },\n  list: async (status = null) => {\n    const params = status ? {\n      status\n    } : {};\n    const response = await apiClient.get('/api/projects', {\n      params\n    });\n    return response.data;\n  }\n};\n\n// Admin Functions\nexport const adminAPI = {\n  reviewProject: async (projectId, action, comments) => {\n    const requestData = {\n      decision: action === 'approve' ? 'approved' : 'rejected',\n      comments: comments\n    };\n    const response = await apiClient.post(`/api/admin/projects/${projectId}/review`, requestData);\n    return response.data;\n  },\n  getDashboard: async () => {\n    const response = await apiClient.get('/api/admin/dashboard');\n    return response.data;\n  }\n};\n\n// MRV Data Collection\nexport const mrvAPI = {\n  collect: async mrvData => {\n    const response = await apiClient.post('/mrv/collect', mrvData);\n    return response.data;\n  },\n  getData: async projectId => {\n    const response = await apiClient.get(`/mrv/${projectId}`);\n    return response.data;\n  }\n};\n\n// Verification\nexport const verificationAPI = {\n  verify: async verificationData => {\n    const response = await apiClient.post('/verification/verify', verificationData);\n    return response.data;\n  }\n};\n\n// Carbon Credits\nexport const creditAPI = {\n  tokenize: async projectId => {\n    const response = await apiClient.post(`/credits/tokenize/${projectId}`);\n    return response.data;\n  }\n};\n\n// Marketplace\nexport const marketplaceAPI = {\n  listCredits: async listingData => {\n    const response = await apiClient.post('/marketplace/list', listingData);\n    return response.data;\n  },\n  getListings: async (status = 'active') => {\n    const response = await apiClient.get('/marketplace', {\n      params: {\n        status\n      }\n    });\n    return response.data;\n  },\n  purchaseCredits: async (listingId, quantity) => {\n    const formData = new FormData();\n    formData.append('quantity', quantity.toString());\n    const response = await apiClient.post(`/marketplace/${listingId}/purchase`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n};\n\n// Payments\nexport const paymentAPI = {\n  distribute: async projectId => {\n    const response = await apiClient.post(`/payments/distribute/${projectId}`);\n    return response.data;\n  }\n};\n\n// Reports\nexport const reportsAPI = {\n  getProjectReport: async projectId => {\n    const response = await apiClient.get(`/reports/project/${projectId}`);\n    return response.data;\n  },\n  getSystemDashboard: async () => {\n    const response = await apiClient.get('/reports/dashboard');\n    return response.data;\n  }\n};\n\n// Health Check\nexport const healthAPI = {\n  check: async () => {\n    const response = await apiClient.get('/health');\n    return response.data;\n  },\n  status: async () => {\n    const response = await apiClient.get('/api/status');\n    return response.data;\n  }\n};\n\n// Utility function to handle API errors\nexport const handleAPIError = error => {\n  if (error.response) {\n    // Server responded with error status\n    return {\n      message: error.response.data.detail || 'An error occurred',\n      status: error.response.status\n    };\n  } else if (error.request) {\n    // Request made but no response\n    return {\n      message: 'Network error - please check your connection',\n      status: 0\n    };\n  } else {\n    // Something else happened\n    return {\n      message: error.message || 'An unexpected error occurred',\n      status: -1\n    };\n  }\n};\nexport default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","projectAPI","projectData","response","post","data","getById","projectId","get","list","status","params","adminAPI","reviewProject","action","comments","requestData","decision","getDashboard","mrvAPI","collect","mrvData","getData","verificationAPI","verify","verificationData","creditAPI","tokenize","marketplaceAPI","listCredits","listingData","getListings","purchaseCredits","listingId","quantity","formData","FormData","append","toString","paymentAPI","distribute","reportsAPI","getProjectReport","getSystemDashboard","healthAPI","check","handleAPIError","error","message","detail"],"sources":["/Users/razashaikh/Desktop/sih/python-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8002';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add auth token to requests if available\napiClient.interceptors.request.use((config) => {\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// API Functions\n\n// Project Management\nexport const projectAPI = {\n  create: async (projectData) => {\n    const response = await apiClient.post('/api/projects/create', projectData);\n    return response.data;\n  },\n  \n  getById: async (projectId) => {\n    const response = await apiClient.get(`/api/projects/${projectId}`);\n    return response.data;\n  },\n  \n  list: async (status = null) => {\n    const params = status ? { status } : {};\n    const response = await apiClient.get('/api/projects', { params });\n    return response.data;\n  },\n};\n\n// Admin Functions\nexport const adminAPI = {\n  reviewProject: async (projectId, action, comments) => {\n    const requestData = {\n      decision: action === 'approve' ? 'approved' : 'rejected',\n      comments: comments\n    };\n    \n    const response = await apiClient.post(`/api/admin/projects/${projectId}/review`, requestData);\n    return response.data;\n  },\n  \n  getDashboard: async () => {\n    const response = await apiClient.get('/api/admin/dashboard');\n    return response.data;\n  },\n};\n\n// MRV Data Collection\nexport const mrvAPI = {\n  collect: async (mrvData) => {\n    const response = await apiClient.post('/mrv/collect', mrvData);\n    return response.data;\n  },\n  \n  getData: async (projectId) => {\n    const response = await apiClient.get(`/mrv/${projectId}`);\n    return response.data;\n  },\n};\n\n// Verification\nexport const verificationAPI = {\n  verify: async (verificationData) => {\n    const response = await apiClient.post('/verification/verify', verificationData);\n    return response.data;\n  },\n};\n\n// Carbon Credits\nexport const creditAPI = {\n  tokenize: async (projectId) => {\n    const response = await apiClient.post(`/credits/tokenize/${projectId}`);\n    return response.data;\n  },\n};\n\n// Marketplace\nexport const marketplaceAPI = {\n  listCredits: async (listingData) => {\n    const response = await apiClient.post('/marketplace/list', listingData);\n    return response.data;\n  },\n  \n  getListings: async (status = 'active') => {\n    const response = await apiClient.get('/marketplace', { params: { status } });\n    return response.data;\n  },\n  \n  purchaseCredits: async (listingId, quantity) => {\n    const formData = new FormData();\n    formData.append('quantity', quantity.toString());\n    \n    const response = await apiClient.post(`/marketplace/${listingId}/purchase`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n};\n\n// Payments\nexport const paymentAPI = {\n  distribute: async (projectId) => {\n    const response = await apiClient.post(`/payments/distribute/${projectId}`);\n    return response.data;\n  },\n};\n\n// Reports\nexport const reportsAPI = {\n  getProjectReport: async (projectId) => {\n    const response = await apiClient.get(`/reports/project/${projectId}`);\n    return response.data;\n  },\n  \n  getSystemDashboard: async () => {\n    const response = await apiClient.get('/reports/dashboard');\n    return response.data;\n  },\n};\n\n// Health Check\nexport const healthAPI = {\n  check: async () => {\n    const response = await apiClient.get('/health');\n    return response.data;\n  },\n  \n  status: async () => {\n    const response = await apiClient.get('/api/status');\n    return response.data;\n  },\n};\n\n// Utility function to handle API errors\nexport const handleAPIError = (error) => {\n  if (error.response) {\n    // Server responded with error status\n    return {\n      message: error.response.data.detail || 'An error occurred',\n      status: error.response.status,\n    };\n  } else if (error.request) {\n    // Request made but no response\n    return {\n      message: 'Network error - please check your connection',\n      status: 0,\n    };\n  } else {\n    // Something else happened\n    return {\n      message: error.message || 'An unexpected error occurred',\n      status: -1,\n    };\n  }\n};\n\nexport default apiClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}