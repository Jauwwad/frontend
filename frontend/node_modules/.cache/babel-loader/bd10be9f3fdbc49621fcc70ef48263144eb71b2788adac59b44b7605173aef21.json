{"ast":null,"code":"import _objectWithoutProperties from \"/Users/razashaikh/Desktop/sih/python-app/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"bounds\", \"boundsOptions\", \"center\", \"children\", \"className\", \"id\", \"placeholder\", \"style\", \"whenReady\", \"zoom\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { LeafletProvider, createLeafletContext } from '@react-leaflet/core';\nimport { Map as LeafletMap } from 'leaflet';\nimport React, { forwardRef, useCallback, useEffect, useImperativeHandle, useState } from 'react';\nfunction MapContainerComponent(_ref, forwardedRef) {\n  let {\n      bounds,\n      boundsOptions,\n      center,\n      children,\n      className,\n      id,\n      placeholder,\n      style,\n      whenReady,\n      zoom\n    } = _ref,\n    options = _objectWithoutProperties(_ref, _excluded);\n  const [props] = useState({\n    className,\n    id,\n    style\n  });\n  const [context, setContext] = useState(null);\n  useImperativeHandle(forwardedRef, () => {\n    var _context$map;\n    return (_context$map = context === null || context === void 0 ? void 0 : context.map) !== null && _context$map !== void 0 ? _context$map : null;\n  }, [context]);\n  const mapRef = useCallback(node => {\n    if (node !== null && context === null) {\n      const map = new LeafletMap(node, options);\n      if (center != null && zoom != null) {\n        map.setView(center, zoom);\n      } else if (bounds != null) {\n        map.fitBounds(bounds, boundsOptions);\n      }\n      if (whenReady != null) {\n        map.whenReady(whenReady);\n      }\n      setContext(createLeafletContext(map));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    return () => {\n      context === null || context === void 0 || context.map.remove();\n    };\n  }, [context]);\n  const contents = context ? /*#__PURE__*/React.createElement(LeafletProvider, {\n    value: context\n  }, children) : placeholder !== null && placeholder !== void 0 ? placeholder : null;\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, props, {\n    ref: mapRef\n  }), contents);\n}\nexport const MapContainer = /*#__PURE__*/forwardRef(MapContainerComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}