{"ast":null,"code":"import axios from 'axios';\nimport blockchainService from './blockchain';\nconst API_BASE_URL = 'http://localhost:8002';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add auth token to requests if available\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// API Functions\n\n// Project Management\nexport const projectAPI = {\n  create: async projectData => {\n    try {\n      console.log('🌊 Creating project with blockchain integration...');\n\n      // First register on our backend\n      const response = await apiClient.post('/api/projects/create', projectData);\n      const result = response.data;\n\n      // If backend registration successful and blockchain is connected, register on blockchain too\n      if (result.success && blockchainService.isConnected) {\n        console.log('💫 Registering project on blockchain...');\n        const blockchainResult = await blockchainService.registerProject(projectData);\n        if (blockchainResult.success) {\n          result.blockchain = {\n            registered: true,\n            transactionHash: blockchainResult.transactionHash,\n            projectId: blockchainResult.projectId,\n            blockNumber: blockchainResult.blockNumber\n          };\n          console.log('✅ Project registered on both backend and blockchain!');\n        } else {\n          result.blockchain = {\n            registered: false,\n            error: blockchainResult.error\n          };\n          console.warn('⚠️ Project registered on backend but blockchain registration failed:', blockchainResult.error);\n        }\n      } else {\n        result.blockchain = {\n          registered: false,\n          reason: 'Blockchain service not connected'\n        };\n      }\n      return result;\n    } catch (error) {\n      console.error('❌ Project creation failed:', error);\n      throw error;\n    }\n  },\n  getById: async projectId => {\n    const response = await apiClient.get(`/api/projects/${projectId}`);\n    return response.data;\n  },\n  list: async (status = null) => {\n    const params = status ? {\n      status\n    } : {};\n    const response = await apiClient.get('/api/projects', {\n      params\n    });\n    return response.data;\n  },\n  // Get projects with blockchain data\n  listWithBlockchain: async (status = null) => {\n    try {\n      const params = status ? {\n        status\n      } : {};\n      const response = await apiClient.get('/api/projects', {\n        params\n      });\n      const projects = response.data;\n\n      // If blockchain is connected, enrich with blockchain data\n      if (blockchainService.isConnected && projects.projects) {\n        console.log('🔗 Enriching projects with blockchain data...');\n        for (let project of projects.projects) {\n          try {\n            // Get carbon credit balance for project owner\n            if (project.blockchain_id) {\n              const blockchainProject = await blockchainService.getProject(project.blockchain_id);\n              project.blockchainData = blockchainProject;\n            }\n          } catch (error) {\n            console.warn('Failed to get blockchain data for project:', project.id, error.message);\n          }\n        }\n      }\n      return projects;\n    } catch (error) {\n      console.error('Failed to list projects:', error);\n      throw error;\n    }\n  }\n};\n\n// Admin Functions\nexport const adminAPI = {\n  reviewProject: async (projectId, action, comments) => {\n    try {\n      const requestData = {\n        decision: action === 'approve' ? 'approved' : 'rejected',\n        comments: comments\n      };\n      const response = await apiClient.post(`/api/admin/projects/${projectId}/review`, requestData);\n      const result = response.data;\n\n      // If approving and blockchain is connected, approve on blockchain too\n      if (action === 'approve' && result.success && blockchainService.isConnected) {\n        console.log('🔗 Approving project on blockchain...');\n        try {\n          // Get project blockchain ID from backend\n          const projectResponse = await apiClient.get(`/api/projects/${projectId}`);\n          const project = projectResponse.data;\n          if (project.blockchain_id) {\n            const blockchainResult = await blockchainService.approveProject(project.blockchain_id);\n            result.blockchain = blockchainResult;\n            if (blockchainResult.success) {\n              console.log('✅ Project approved on both backend and blockchain!');\n            }\n          }\n        } catch (error) {\n          console.warn('⚠️ Failed to approve on blockchain:', error.message);\n          result.blockchain = {\n            success: false,\n            error: error.message\n          };\n        }\n      }\n      return result;\n    } catch (error) {\n      console.error('Failed to review project:', error);\n      throw error;\n    }\n  },\n  getDashboard: async () => {\n    try {\n      const response = await apiClient.get('/api/admin/dashboard');\n      const dashboard = response.data;\n\n      // Enrich with blockchain statistics if connected\n      if (blockchainService.isConnected) {\n        try {\n          const [totalProjects, totalCredits, userBalance] = await Promise.all([blockchainService.getTotalProjectsCount(), blockchainService.getTotalCarbonCredits(), blockchainService.getCarbonCreditBalance()]);\n          dashboard.blockchain = {\n            totalProjects,\n            totalCredits,\n            userBalance,\n            network: await blockchainService.getNetworkInfo()\n          };\n        } catch (error) {\n          console.warn('Failed to get blockchain dashboard data:', error);\n        }\n      }\n      return dashboard;\n    } catch (error) {\n      console.error('Failed to get dashboard:', error);\n      throw error;\n    }\n  }\n};\n\n// MRV Data Collection\nexport const mrvAPI = {\n  collect: async mrvData => {\n    const response = await apiClient.post('/mrv/collect', mrvData);\n    return response.data;\n  },\n  getData: async projectId => {\n    const response = await apiClient.get(`/mrv/${projectId}`);\n    return response.data;\n  }\n};\n\n// Verification\nexport const verificationAPI = {\n  verify: async verificationData => {\n    const response = await apiClient.post('/verification/verify', verificationData);\n    return response.data;\n  }\n};\n\n// Carbon Credits\nexport const creditAPI = {\n  tokenize: async projectId => {\n    const response = await apiClient.post(`/credits/tokenize/${projectId}`);\n    return response.data;\n  },\n  // Mint carbon credits on blockchain\n  mintCredits: async (projectId, amount, batchId = '') => {\n    try {\n      if (!blockchainService.isConnected) {\n        throw new Error('Blockchain service not connected');\n      }\n      console.log('🪙 Minting carbon credits on blockchain...');\n      const result = await blockchainService.mintCarbonCredits(projectId, amount, batchId);\n      if (result.success) {\n        console.log('✅ Carbon credits minted successfully!');\n\n        // Optionally update backend with minting information\n        try {\n          await apiClient.post(`/credits/mint-record`, {\n            projectId,\n            amount,\n            transactionHash: result.transactionHash,\n            batchId\n          });\n        } catch (error) {\n          console.warn('Failed to record minting in backend:', error.message);\n        }\n      }\n      return result;\n    } catch (error) {\n      console.error('Failed to mint credits:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Get carbon credit balance\n  getBalance: async (address = null) => {\n    try {\n      if (!blockchainService.isConnected) {\n        return 0;\n      }\n      return await blockchainService.getCarbonCreditBalance(address);\n    } catch (error) {\n      console.error('Failed to get carbon credit balance:', error);\n      return 0;\n    }\n  },\n  // Transfer carbon credits\n  transfer: async (toAddress, amount) => {\n    try {\n      if (!blockchainService.isConnected) {\n        throw new Error('Blockchain service not connected');\n      }\n      console.log('💸 Transferring carbon credits...');\n      return await blockchainService.transferCarbonCredits(toAddress, amount);\n    } catch (error) {\n      console.error('Failed to transfer credits:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n};\n\n// Marketplace\nexport const marketplaceAPI = {\n  listCredits: async listingData => {\n    const response = await apiClient.post('/marketplace/list', listingData);\n    return response.data;\n  },\n  getListings: async (status = 'active') => {\n    const response = await apiClient.get('/marketplace', {\n      params: {\n        status\n      }\n    });\n    return response.data;\n  },\n  purchaseCredits: async (listingId, quantity) => {\n    const formData = new FormData();\n    formData.append('quantity', quantity.toString());\n    const response = await apiClient.post(`/marketplace/${listingId}/purchase`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n};\n\n// Payments\nexport const paymentAPI = {\n  distribute: async projectId => {\n    const response = await apiClient.post(`/payments/distribute/${projectId}`);\n    return response.data;\n  }\n};\n\n// Reports\nexport const reportsAPI = {\n  getProjectReport: async projectId => {\n    const response = await apiClient.get(`/reports/project/${projectId}`);\n    return response.data;\n  },\n  getSystemDashboard: async () => {\n    const response = await apiClient.get('/reports/dashboard');\n    return response.data;\n  }\n};\n\n// Health Check\nexport const healthAPI = {\n  check: async () => {\n    const response = await apiClient.get('/health');\n    return response.data;\n  },\n  status: async () => {\n    const response = await apiClient.get('/api/status');\n    return response.data;\n  }\n};\n\n// Utility function to handle API errors\nexport const handleAPIError = error => {\n  if (error.response) {\n    // Server responded with error status\n    return {\n      message: error.response.data.detail || 'An error occurred',\n      status: error.response.status\n    };\n  } else if (error.request) {\n    // Request made but no response\n    return {\n      message: 'Network error - please check your connection',\n      status: 0\n    };\n  } else {\n    // Something else happened\n    return {\n      message: error.message || 'An unexpected error occurred',\n      status: -1\n    };\n  }\n};\n\n// Blockchain Integration Functions\nexport const blockchainAPI = {\n  // Initialize blockchain connection\n  init: async () => {\n    try {\n      console.log('🔗 Initializing blockchain connection...');\n      const success = await blockchainService.init();\n      if (success) {\n        console.log('✅ Blockchain connected successfully!');\n\n        // Subscribe to blockchain events\n        blockchainService.subscribeToProjectEvents((eventType, data) => {\n          console.log('📡 Blockchain event:', eventType, data);\n          // You can emit custom events here for UI updates\n          window.dispatchEvent(new CustomEvent('blockchain-event', {\n            detail: {\n              type: eventType,\n              data\n            }\n          }));\n        });\n      }\n      return success;\n    } catch (error) {\n      console.error('❌ Failed to initialize blockchain:', error);\n      return false;\n    }\n  },\n  // Check if blockchain is connected\n  isConnected: () => blockchainService.isConnected,\n  // Get user's wallet address\n  getAccount: () => blockchainService.account,\n  // Get user's projects from blockchain\n  getUserProjects: async () => {\n    try {\n      if (!blockchainService.isConnected) {\n        return [];\n      }\n      return await blockchainService.getUserProjects();\n    } catch (error) {\n      console.error('Failed to get user projects from blockchain:', error);\n      return [];\n    }\n  },\n  // Get network information\n  getNetworkInfo: async () => {\n    try {\n      if (!blockchainService.isConnected) {\n        return null;\n      }\n      return await blockchainService.getNetworkInfo();\n    } catch (error) {\n      console.error('Failed to get network info:', error);\n      return null;\n    }\n  },\n  // Get contract addresses\n  getContractAddresses: () => blockchainService.getContractAddresses(),\n  // Format address for display\n  formatAddress: address => blockchainService.formatAddress(address),\n  // Check if MetaMask is available\n  hasMetaMask: () => blockchainService.hasMetaMask()\n};\nexport default apiClient;","map":{"version":3,"names":["axios","blockchainService","API_BASE_URL","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","projectAPI","projectData","console","log","response","post","result","data","success","isConnected","blockchainResult","registerProject","blockchain","registered","transactionHash","projectId","blockNumber","error","warn","reason","getById","get","list","status","params","listWithBlockchain","projects","project","blockchain_id","blockchainProject","getProject","blockchainData","id","message","adminAPI","reviewProject","action","comments","requestData","decision","projectResponse","approveProject","getDashboard","dashboard","totalProjects","totalCredits","userBalance","Promise","all","getTotalProjectsCount","getTotalCarbonCredits","getCarbonCreditBalance","network","getNetworkInfo","mrvAPI","collect","mrvData","getData","verificationAPI","verify","verificationData","creditAPI","tokenize","mintCredits","amount","batchId","Error","mintCarbonCredits","getBalance","address","transfer","toAddress","transferCarbonCredits","marketplaceAPI","listCredits","listingData","getListings","purchaseCredits","listingId","quantity","formData","FormData","append","toString","paymentAPI","distribute","reportsAPI","getProjectReport","getSystemDashboard","healthAPI","check","handleAPIError","detail","blockchainAPI","init","subscribeToProjectEvents","eventType","window","dispatchEvent","CustomEvent","type","getAccount","account","getUserProjects","getContractAddresses","formatAddress","hasMetaMask"],"sources":["/Users/razashaikh/Desktop/sih/python-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport blockchainService from './blockchain';\n\nconst API_BASE_URL = 'http://localhost:8002';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add auth token to requests if available\napiClient.interceptors.request.use((config) => {\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// API Functions\n\n// Project Management\nexport const projectAPI = {\n  create: async (projectData) => {\n    try {\n      console.log('🌊 Creating project with blockchain integration...');\n      \n      // First register on our backend\n      const response = await apiClient.post('/api/projects/create', projectData);\n      const result = response.data;\n      \n      // If backend registration successful and blockchain is connected, register on blockchain too\n      if (result.success && blockchainService.isConnected) {\n        console.log('💫 Registering project on blockchain...');\n        const blockchainResult = await blockchainService.registerProject(projectData);\n        \n        if (blockchainResult.success) {\n          result.blockchain = {\n            registered: true,\n            transactionHash: blockchainResult.transactionHash,\n            projectId: blockchainResult.projectId,\n            blockNumber: blockchainResult.blockNumber\n          };\n          console.log('✅ Project registered on both backend and blockchain!');\n        } else {\n          result.blockchain = {\n            registered: false,\n            error: blockchainResult.error\n          };\n          console.warn('⚠️ Project registered on backend but blockchain registration failed:', blockchainResult.error);\n        }\n      } else {\n        result.blockchain = {\n          registered: false,\n          reason: 'Blockchain service not connected'\n        };\n      }\n      \n      return result;\n    } catch (error) {\n      console.error('❌ Project creation failed:', error);\n      throw error;\n    }\n  },\n  \n  getById: async (projectId) => {\n    const response = await apiClient.get(`/api/projects/${projectId}`);\n    return response.data;\n  },\n  \n  list: async (status = null) => {\n    const params = status ? { status } : {};\n    const response = await apiClient.get('/api/projects', { params });\n    return response.data;\n  },\n  \n  // Get projects with blockchain data\n  listWithBlockchain: async (status = null) => {\n    try {\n      const params = status ? { status } : {};\n      const response = await apiClient.get('/api/projects', { params });\n      const projects = response.data;\n      \n      // If blockchain is connected, enrich with blockchain data\n      if (blockchainService.isConnected && projects.projects) {\n        console.log('🔗 Enriching projects with blockchain data...');\n        \n        for (let project of projects.projects) {\n          try {\n            // Get carbon credit balance for project owner\n            if (project.blockchain_id) {\n              const blockchainProject = await blockchainService.getProject(project.blockchain_id);\n              project.blockchainData = blockchainProject;\n            }\n          } catch (error) {\n            console.warn('Failed to get blockchain data for project:', project.id, error.message);\n          }\n        }\n      }\n      \n      return projects;\n    } catch (error) {\n      console.error('Failed to list projects:', error);\n      throw error;\n    }\n  }\n};\n\n// Admin Functions\nexport const adminAPI = {\n  reviewProject: async (projectId, action, comments) => {\n    try {\n      const requestData = {\n        decision: action === 'approve' ? 'approved' : 'rejected',\n        comments: comments\n      };\n      \n      const response = await apiClient.post(`/api/admin/projects/${projectId}/review`, requestData);\n      const result = response.data;\n      \n      // If approving and blockchain is connected, approve on blockchain too\n      if (action === 'approve' && result.success && blockchainService.isConnected) {\n        console.log('🔗 Approving project on blockchain...');\n        try {\n          // Get project blockchain ID from backend\n          const projectResponse = await apiClient.get(`/api/projects/${projectId}`);\n          const project = projectResponse.data;\n          \n          if (project.blockchain_id) {\n            const blockchainResult = await blockchainService.approveProject(project.blockchain_id);\n            result.blockchain = blockchainResult;\n            \n            if (blockchainResult.success) {\n              console.log('✅ Project approved on both backend and blockchain!');\n            }\n          }\n        } catch (error) {\n          console.warn('⚠️ Failed to approve on blockchain:', error.message);\n          result.blockchain = { success: false, error: error.message };\n        }\n      }\n      \n      return result;\n    } catch (error) {\n      console.error('Failed to review project:', error);\n      throw error;\n    }\n  },\n  \n  getDashboard: async () => {\n    try {\n      const response = await apiClient.get('/api/admin/dashboard');\n      const dashboard = response.data;\n      \n      // Enrich with blockchain statistics if connected\n      if (blockchainService.isConnected) {\n        try {\n          const [totalProjects, totalCredits, userBalance] = await Promise.all([\n            blockchainService.getTotalProjectsCount(),\n            blockchainService.getTotalCarbonCredits(),\n            blockchainService.getCarbonCreditBalance()\n          ]);\n          \n          dashboard.blockchain = {\n            totalProjects,\n            totalCredits,\n            userBalance,\n            network: await blockchainService.getNetworkInfo()\n          };\n        } catch (error) {\n          console.warn('Failed to get blockchain dashboard data:', error);\n        }\n      }\n      \n      return dashboard;\n    } catch (error) {\n      console.error('Failed to get dashboard:', error);\n      throw error;\n    }\n  },\n};\n\n// MRV Data Collection\nexport const mrvAPI = {\n  collect: async (mrvData) => {\n    const response = await apiClient.post('/mrv/collect', mrvData);\n    return response.data;\n  },\n  \n  getData: async (projectId) => {\n    const response = await apiClient.get(`/mrv/${projectId}`);\n    return response.data;\n  },\n};\n\n// Verification\nexport const verificationAPI = {\n  verify: async (verificationData) => {\n    const response = await apiClient.post('/verification/verify', verificationData);\n    return response.data;\n  },\n};\n\n// Carbon Credits\nexport const creditAPI = {\n  tokenize: async (projectId) => {\n    const response = await apiClient.post(`/credits/tokenize/${projectId}`);\n    return response.data;\n  },\n  \n  // Mint carbon credits on blockchain\n  mintCredits: async (projectId, amount, batchId = '') => {\n    try {\n      if (!blockchainService.isConnected) {\n        throw new Error('Blockchain service not connected');\n      }\n      \n      console.log('🪙 Minting carbon credits on blockchain...');\n      const result = await blockchainService.mintCarbonCredits(projectId, amount, batchId);\n      \n      if (result.success) {\n        console.log('✅ Carbon credits minted successfully!');\n        \n        // Optionally update backend with minting information\n        try {\n          await apiClient.post(`/credits/mint-record`, {\n            projectId,\n            amount,\n            transactionHash: result.transactionHash,\n            batchId\n          });\n        } catch (error) {\n          console.warn('Failed to record minting in backend:', error.message);\n        }\n      }\n      \n      return result;\n    } catch (error) {\n      console.error('Failed to mint credits:', error);\n      return { success: false, error: error.message };\n    }\n  },\n  \n  // Get carbon credit balance\n  getBalance: async (address = null) => {\n    try {\n      if (!blockchainService.isConnected) {\n        return 0;\n      }\n      \n      return await blockchainService.getCarbonCreditBalance(address);\n    } catch (error) {\n      console.error('Failed to get carbon credit balance:', error);\n      return 0;\n    }\n  },\n  \n  // Transfer carbon credits\n  transfer: async (toAddress, amount) => {\n    try {\n      if (!blockchainService.isConnected) {\n        throw new Error('Blockchain service not connected');\n      }\n      \n      console.log('💸 Transferring carbon credits...');\n      return await blockchainService.transferCarbonCredits(toAddress, amount);\n    } catch (error) {\n      console.error('Failed to transfer credits:', error);\n      return { success: false, error: error.message };\n    }\n  }\n};\n\n// Marketplace\nexport const marketplaceAPI = {\n  listCredits: async (listingData) => {\n    const response = await apiClient.post('/marketplace/list', listingData);\n    return response.data;\n  },\n  \n  getListings: async (status = 'active') => {\n    const response = await apiClient.get('/marketplace', { params: { status } });\n    return response.data;\n  },\n  \n  purchaseCredits: async (listingId, quantity) => {\n    const formData = new FormData();\n    formData.append('quantity', quantity.toString());\n    \n    const response = await apiClient.post(`/marketplace/${listingId}/purchase`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n};\n\n// Payments\nexport const paymentAPI = {\n  distribute: async (projectId) => {\n    const response = await apiClient.post(`/payments/distribute/${projectId}`);\n    return response.data;\n  },\n};\n\n// Reports\nexport const reportsAPI = {\n  getProjectReport: async (projectId) => {\n    const response = await apiClient.get(`/reports/project/${projectId}`);\n    return response.data;\n  },\n  \n  getSystemDashboard: async () => {\n    const response = await apiClient.get('/reports/dashboard');\n    return response.data;\n  },\n};\n\n// Health Check\nexport const healthAPI = {\n  check: async () => {\n    const response = await apiClient.get('/health');\n    return response.data;\n  },\n  \n  status: async () => {\n    const response = await apiClient.get('/api/status');\n    return response.data;\n  },\n};\n\n// Utility function to handle API errors\nexport const handleAPIError = (error) => {\n  if (error.response) {\n    // Server responded with error status\n    return {\n      message: error.response.data.detail || 'An error occurred',\n      status: error.response.status,\n    };\n  } else if (error.request) {\n    // Request made but no response\n    return {\n      message: 'Network error - please check your connection',\n      status: 0,\n    };\n  } else {\n    // Something else happened\n    return {\n      message: error.message || 'An unexpected error occurred',\n      status: -1,\n    };\n  }\n};\n\n// Blockchain Integration Functions\nexport const blockchainAPI = {\n  // Initialize blockchain connection\n  init: async () => {\n    try {\n      console.log('🔗 Initializing blockchain connection...');\n      const success = await blockchainService.init();\n      \n      if (success) {\n        console.log('✅ Blockchain connected successfully!');\n        \n        // Subscribe to blockchain events\n        blockchainService.subscribeToProjectEvents((eventType, data) => {\n          console.log('📡 Blockchain event:', eventType, data);\n          // You can emit custom events here for UI updates\n          window.dispatchEvent(new CustomEvent('blockchain-event', {\n            detail: { type: eventType, data }\n          }));\n        });\n      }\n      \n      return success;\n    } catch (error) {\n      console.error('❌ Failed to initialize blockchain:', error);\n      return false;\n    }\n  },\n  \n  // Check if blockchain is connected\n  isConnected: () => blockchainService.isConnected,\n  \n  // Get user's wallet address\n  getAccount: () => blockchainService.account,\n  \n  // Get user's projects from blockchain\n  getUserProjects: async () => {\n    try {\n      if (!blockchainService.isConnected) {\n        return [];\n      }\n      \n      return await blockchainService.getUserProjects();\n    } catch (error) {\n      console.error('Failed to get user projects from blockchain:', error);\n      return [];\n    }\n  },\n  \n  // Get network information\n  getNetworkInfo: async () => {\n    try {\n      if (!blockchainService.isConnected) {\n        return null;\n      }\n      \n      return await blockchainService.getNetworkInfo();\n    } catch (error) {\n      console.error('Failed to get network info:', error);\n      return null;\n    }\n  },\n  \n  // Get contract addresses\n  getContractAddresses: () => blockchainService.getContractAddresses(),\n  \n  // Format address for display\n  formatAddress: (address) => blockchainService.formatAddress(address),\n  \n  // Check if MetaMask is available\n  hasMetaMask: () => blockchainService.hasMetaMask()\n};\n\nexport default apiClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}