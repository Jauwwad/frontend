{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jauww\\\\OneDrive\\\\Desktop\\\\sih frontend\\\\frontend\\\\src\\\\contexts\\\\BlockchainContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { blockchainAPI } from '../services/api';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  isConnected: false,\n  account: null,\n  networkInfo: null,\n  userProjects: [],\n  carbonBalance: 0,\n  loading: false,\n  error: null,\n  contractAddresses: {},\n  hasMetaMask: false\n};\n\n// Actions\nconst BLOCKCHAIN_ACTIONS = {\n  SET_LOADING: 'SET_LOADING',\n  SET_CONNECTED: 'SET_CONNECTED',\n  SET_ACCOUNT: 'SET_ACCOUNT',\n  SET_NETWORK_INFO: 'SET_NETWORK_INFO',\n  SET_USER_PROJECTS: 'SET_USER_PROJECTS',\n  SET_CARBON_BALANCE: 'SET_CARBON_BALANCE',\n  SET_ERROR: 'SET_ERROR',\n  SET_CONTRACT_ADDRESSES: 'SET_CONTRACT_ADDRESSES',\n  SET_HAS_METAMASK: 'SET_HAS_METAMASK',\n  RESET: 'RESET'\n};\n\n// Reducer\nconst blockchainReducer = (state, action) => {\n  switch (action.type) {\n    case BLOCKCHAIN_ACTIONS.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case BLOCKCHAIN_ACTIONS.SET_CONNECTED:\n      return {\n        ...state,\n        isConnected: action.payload\n      };\n    case BLOCKCHAIN_ACTIONS.SET_ACCOUNT:\n      return {\n        ...state,\n        account: action.payload\n      };\n    case BLOCKCHAIN_ACTIONS.SET_NETWORK_INFO:\n      return {\n        ...state,\n        networkInfo: action.payload\n      };\n    case BLOCKCHAIN_ACTIONS.SET_USER_PROJECTS:\n      return {\n        ...state,\n        userProjects: action.payload\n      };\n    case BLOCKCHAIN_ACTIONS.SET_CARBON_BALANCE:\n      return {\n        ...state,\n        carbonBalance: action.payload\n      };\n    case BLOCKCHAIN_ACTIONS.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      };\n    case BLOCKCHAIN_ACTIONS.SET_CONTRACT_ADDRESSES:\n      return {\n        ...state,\n        contractAddresses: action.payload\n      };\n    case BLOCKCHAIN_ACTIONS.SET_HAS_METAMASK:\n      return {\n        ...state,\n        hasMetaMask: action.payload\n      };\n    case BLOCKCHAIN_ACTIONS.RESET:\n      return {\n        ...initialState,\n        hasMetaMask: state.hasMetaMask\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst BlockchainContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport const BlockchainProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(blockchainReducer, initialState);\n\n  // Initialize blockchain connection\n  const initializeBlockchain = async () => {\n    try {\n      dispatch({\n        type: BLOCKCHAIN_ACTIONS.SET_LOADING,\n        payload: true\n      });\n      dispatch({\n        type: BLOCKCHAIN_ACTIONS.SET_ERROR,\n        payload: null\n      });\n\n      // Check if MetaMask is available\n      const hasMetaMask = blockchainAPI.hasMetaMask();\n      dispatch({\n        type: BLOCKCHAIN_ACTIONS.SET_HAS_METAMASK,\n        payload: hasMetaMask\n      });\n      if (!hasMetaMask) {\n        throw new Error('MetaMask not detected. Please install MetaMask to use blockchain features.');\n      }\n\n      // Initialize blockchain connection\n      const success = await blockchainAPI.init();\n      if (success) {\n        dispatch({\n          type: BLOCKCHAIN_ACTIONS.SET_CONNECTED,\n          payload: true\n        });\n\n        // Get account\n        const account = blockchainAPI.getAccount();\n        dispatch({\n          type: BLOCKCHAIN_ACTIONS.SET_ACCOUNT,\n          payload: account\n        });\n\n        // Get network info\n        const networkInfo = await blockchainAPI.getNetworkInfo();\n        dispatch({\n          type: BLOCKCHAIN_ACTIONS.SET_NETWORK_INFO,\n          payload: networkInfo\n        });\n\n        // Get contract addresses\n        const contractAddresses = blockchainAPI.getContractAddresses();\n        dispatch({\n          type: BLOCKCHAIN_ACTIONS.SET_CONTRACT_ADDRESSES,\n          payload: contractAddresses\n        });\n\n        // Load user data\n        await loadUserData();\n        console.log('🎉 Blockchain initialized successfully!');\n      } else {\n        throw new Error('Failed to connect to blockchain');\n      }\n    } catch (error) {\n      console.error('❌ Blockchain initialization failed:', error);\n      dispatch({\n        type: BLOCKCHAIN_ACTIONS.SET_ERROR,\n        payload: error.message\n      });\n      dispatch({\n        type: BLOCKCHAIN_ACTIONS.SET_CONNECTED,\n        payload: false\n      });\n    } finally {\n      dispatch({\n        type: BLOCKCHAIN_ACTIONS.SET_LOADING,\n        payload: false\n      });\n    }\n  };\n\n  // Load user-specific data\n  const loadUserData = async () => {\n    try {\n      if (!blockchainAPI.isConnected()) return;\n\n      // Get user's projects from blockchain\n      const userProjects = await blockchainAPI.getUserProjects();\n      dispatch({\n        type: BLOCKCHAIN_ACTIONS.SET_USER_PROJECTS,\n        payload: userProjects\n      });\n\n      // Get carbon credit balance\n      const carbonBalance = await blockchainAPI.getCarbonBalance();\n      dispatch({\n        type: BLOCKCHAIN_ACTIONS.SET_CARBON_BALANCE,\n        payload: carbonBalance\n      });\n    } catch (error) {\n      console.error('Failed to load user data:', error);\n    }\n  };\n\n  // Refresh user data\n  const refreshUserData = async () => {\n    await loadUserData();\n  };\n\n  // Disconnect blockchain\n  const disconnect = () => {\n    dispatch({\n      type: BLOCKCHAIN_ACTIONS.RESET\n    });\n    console.log('🔌 Blockchain disconnected');\n  };\n\n  // Listen for account changes\n  useEffect(() => {\n    if (typeof window.ethereum !== 'undefined') {\n      const handleAccountsChanged = accounts => {\n        if (accounts.length === 0) {\n          disconnect();\n        } else if (accounts[0] !== state.account) {\n          dispatch({\n            type: BLOCKCHAIN_ACTIONS.SET_ACCOUNT,\n            payload: accounts[0]\n          });\n          loadUserData();\n        }\n      };\n      const handleChainChanged = chainId => {\n        console.log('🔗 Chain changed:', chainId);\n        // Reload the page or reconnect\n        window.location.reload();\n      };\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', handleChainChanged);\n      return () => {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n      };\n    }\n  }, [state.account]);\n\n  // Listen for blockchain events\n  useEffect(() => {\n    const handleBlockchainEvent = event => {\n      const {\n        type,\n        data\n      } = event.detail;\n      console.log('📡 Received blockchain event:', type, data);\n\n      // Refresh user data when relevant events occur\n      if (type === 'ProjectRegistered' || type === 'ProjectApproved') {\n        loadUserData();\n      }\n    };\n    window.addEventListener('blockchain-event', handleBlockchainEvent);\n    return () => {\n      window.removeEventListener('blockchain-event', handleBlockchainEvent);\n    };\n  }, []);\n\n  // Context value\n  const value = {\n    ...state,\n    // Actions\n    initializeBlockchain,\n    disconnect,\n    refreshUserData,\n    // Utilities\n    formatAddress: blockchainAPI.formatAddress,\n    // Helper functions\n    isReady: state.isConnected && !state.loading,\n    needsMetaMask: !state.hasMetaMask,\n    canConnect: state.hasMetaMask && !state.isConnected && !state.loading\n  };\n  return /*#__PURE__*/_jsxDEV(BlockchainContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook to use blockchain context\n_s(BlockchainProvider, \"GUSXxL/WUElrtHc/X73NyHNRMdw=\");\n_c = BlockchainProvider;\nexport const useBlockchain = () => {\n  _s2();\n  const context = useContext(BlockchainContext);\n  if (!context) {\n    throw new Error('useBlockchain must be used within a BlockchainProvider');\n  }\n  return context;\n};\n_s2(useBlockchain, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default BlockchainContext;\nvar _c;\n$RefreshReg$(_c, \"BlockchainProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","blockchainAPI","jsxDEV","_jsxDEV","initialState","isConnected","account","networkInfo","userProjects","carbonBalance","loading","error","contractAddresses","hasMetaMask","BLOCKCHAIN_ACTIONS","SET_LOADING","SET_CONNECTED","SET_ACCOUNT","SET_NETWORK_INFO","SET_USER_PROJECTS","SET_CARBON_BALANCE","SET_ERROR","SET_CONTRACT_ADDRESSES","SET_HAS_METAMASK","RESET","blockchainReducer","state","action","type","payload","BlockchainContext","BlockchainProvider","children","_s","dispatch","initializeBlockchain","Error","success","init","getAccount","getNetworkInfo","getContractAddresses","loadUserData","console","log","message","getUserProjects","getCarbonBalance","refreshUserData","disconnect","window","ethereum","handleAccountsChanged","accounts","length","handleChainChanged","chainId","location","reload","on","removeListener","handleBlockchainEvent","event","data","detail","addEventListener","removeEventListener","value","formatAddress","isReady","needsMetaMask","canConnect","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useBlockchain","_s2","context","$RefreshReg$"],"sources":["C:/Users/jauww/OneDrive/Desktop/sih frontend/frontend/src/contexts/BlockchainContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { blockchainAPI } from '../services/api';\n\n// Initial state\nconst initialState = {\n  isConnected: false,\n  account: null,\n  networkInfo: null,\n  userProjects: [],\n  carbonBalance: 0,\n  loading: false,\n  error: null,\n  contractAddresses: {},\n  hasMetaMask: false\n};\n\n// Actions\nconst BLOCKCHAIN_ACTIONS = {\n  SET_LOADING: 'SET_LOADING',\n  SET_CONNECTED: 'SET_CONNECTED',\n  SET_ACCOUNT: 'SET_ACCOUNT',\n  SET_NETWORK_INFO: 'SET_NETWORK_INFO',\n  SET_USER_PROJECTS: 'SET_USER_PROJECTS',\n  SET_CARBON_BALANCE: 'SET_CARBON_BALANCE',\n  SET_ERROR: 'SET_ERROR',\n  SET_CONTRACT_ADDRESSES: 'SET_CONTRACT_ADDRESSES',\n  SET_HAS_METAMASK: 'SET_HAS_METAMASK',\n  RESET: 'RESET'\n};\n\n// Reducer\nconst blockchainReducer = (state, action) => {\n  switch (action.type) {\n    case BLOCKCHAIN_ACTIONS.SET_LOADING:\n      return { ...state, loading: action.payload };\n    \n    case BLOCKCHAIN_ACTIONS.SET_CONNECTED:\n      return { ...state, isConnected: action.payload };\n    \n    case BLOCKCHAIN_ACTIONS.SET_ACCOUNT:\n      return { ...state, account: action.payload };\n    \n    case BLOCKCHAIN_ACTIONS.SET_NETWORK_INFO:\n      return { ...state, networkInfo: action.payload };\n    \n    case BLOCKCHAIN_ACTIONS.SET_USER_PROJECTS:\n      return { ...state, userProjects: action.payload };\n    \n    case BLOCKCHAIN_ACTIONS.SET_CARBON_BALANCE:\n      return { ...state, carbonBalance: action.payload };\n    \n    case BLOCKCHAIN_ACTIONS.SET_ERROR:\n      return { ...state, error: action.payload };\n    \n    case BLOCKCHAIN_ACTIONS.SET_CONTRACT_ADDRESSES:\n      return { ...state, contractAddresses: action.payload };\n    \n    case BLOCKCHAIN_ACTIONS.SET_HAS_METAMASK:\n      return { ...state, hasMetaMask: action.payload };\n    \n    case BLOCKCHAIN_ACTIONS.RESET:\n      return { ...initialState, hasMetaMask: state.hasMetaMask };\n    \n    default:\n      return state;\n  }\n};\n\n// Create context\nconst BlockchainContext = createContext();\n\n// Provider component\nexport const BlockchainProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(blockchainReducer, initialState);\n\n  // Initialize blockchain connection\n  const initializeBlockchain = async () => {\n    try {\n      dispatch({ type: BLOCKCHAIN_ACTIONS.SET_LOADING, payload: true });\n      dispatch({ type: BLOCKCHAIN_ACTIONS.SET_ERROR, payload: null });\n\n      // Check if MetaMask is available\n      const hasMetaMask = blockchainAPI.hasMetaMask();\n      dispatch({ type: BLOCKCHAIN_ACTIONS.SET_HAS_METAMASK, payload: hasMetaMask });\n\n      if (!hasMetaMask) {\n        throw new Error('MetaMask not detected. Please install MetaMask to use blockchain features.');\n      }\n\n      // Initialize blockchain connection\n      const success = await blockchainAPI.init();\n      \n      if (success) {\n        dispatch({ type: BLOCKCHAIN_ACTIONS.SET_CONNECTED, payload: true });\n        \n        // Get account\n        const account = blockchainAPI.getAccount();\n        dispatch({ type: BLOCKCHAIN_ACTIONS.SET_ACCOUNT, payload: account });\n        \n        // Get network info\n        const networkInfo = await blockchainAPI.getNetworkInfo();\n        dispatch({ type: BLOCKCHAIN_ACTIONS.SET_NETWORK_INFO, payload: networkInfo });\n        \n        // Get contract addresses\n        const contractAddresses = blockchainAPI.getContractAddresses();\n        dispatch({ type: BLOCKCHAIN_ACTIONS.SET_CONTRACT_ADDRESSES, payload: contractAddresses });\n        \n        // Load user data\n        await loadUserData();\n        \n        console.log('🎉 Blockchain initialized successfully!');\n      } else {\n        throw new Error('Failed to connect to blockchain');\n      }\n    } catch (error) {\n      console.error('❌ Blockchain initialization failed:', error);\n      dispatch({ type: BLOCKCHAIN_ACTIONS.SET_ERROR, payload: error.message });\n      dispatch({ type: BLOCKCHAIN_ACTIONS.SET_CONNECTED, payload: false });\n    } finally {\n      dispatch({ type: BLOCKCHAIN_ACTIONS.SET_LOADING, payload: false });\n    }\n  };\n\n  // Load user-specific data\n  const loadUserData = async () => {\n    try {\n      if (!blockchainAPI.isConnected()) return;\n\n      // Get user's projects from blockchain\n      const userProjects = await blockchainAPI.getUserProjects();\n      dispatch({ type: BLOCKCHAIN_ACTIONS.SET_USER_PROJECTS, payload: userProjects });\n\n      // Get carbon credit balance\n      const carbonBalance = await blockchainAPI.getCarbonBalance();\n      dispatch({ type: BLOCKCHAIN_ACTIONS.SET_CARBON_BALANCE, payload: carbonBalance });\n\n    } catch (error) {\n      console.error('Failed to load user data:', error);\n    }\n  };\n\n  // Refresh user data\n  const refreshUserData = async () => {\n    await loadUserData();\n  };\n\n  // Disconnect blockchain\n  const disconnect = () => {\n    dispatch({ type: BLOCKCHAIN_ACTIONS.RESET });\n    console.log('🔌 Blockchain disconnected');\n  };\n\n  // Listen for account changes\n  useEffect(() => {\n    if (typeof window.ethereum !== 'undefined') {\n      const handleAccountsChanged = (accounts) => {\n        if (accounts.length === 0) {\n          disconnect();\n        } else if (accounts[0] !== state.account) {\n          dispatch({ type: BLOCKCHAIN_ACTIONS.SET_ACCOUNT, payload: accounts[0] });\n          loadUserData();\n        }\n      };\n\n      const handleChainChanged = (chainId) => {\n        console.log('🔗 Chain changed:', chainId);\n        // Reload the page or reconnect\n        window.location.reload();\n      };\n\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', handleChainChanged);\n\n      return () => {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n      };\n    }\n  }, [state.account]);\n\n  // Listen for blockchain events\n  useEffect(() => {\n    const handleBlockchainEvent = (event) => {\n      const { type, data } = event.detail;\n      console.log('📡 Received blockchain event:', type, data);\n      \n      // Refresh user data when relevant events occur\n      if (type === 'ProjectRegistered' || type === 'ProjectApproved') {\n        loadUserData();\n      }\n    };\n\n    window.addEventListener('blockchain-event', handleBlockchainEvent);\n    \n    return () => {\n      window.removeEventListener('blockchain-event', handleBlockchainEvent);\n    };\n  }, []);\n\n  // Context value\n  const value = {\n    ...state,\n    \n    // Actions\n    initializeBlockchain,\n    disconnect,\n    refreshUserData,\n    \n    // Utilities\n    formatAddress: blockchainAPI.formatAddress,\n    \n    // Helper functions\n    isReady: state.isConnected && !state.loading,\n    needsMetaMask: !state.hasMetaMask,\n    canConnect: state.hasMetaMask && !state.isConnected && !state.loading\n  };\n\n  return (\n    <BlockchainContext.Provider value={value}>\n      {children}\n    </BlockchainContext.Provider>\n  );\n};\n\n// Hook to use blockchain context\nexport const useBlockchain = () => {\n  const context = useContext(BlockchainContext);\n  \n  if (!context) {\n    throw new Error('useBlockchain must be used within a BlockchainProvider');\n  }\n  \n  return context;\n};\n\nexport default BlockchainContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}